<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: groovy | My Octopress Blog]]></title>
  <link href="http://seletz.github.com/blog/categories/groovy/atom.xml" rel="self"/>
  <link href="http://seletz.github.com/"/>
  <updated>2012-09-01T13:34:56+02:00</updated>
  <id>http://seletz.github.com/</id>
  <author>
    <name><![CDATA[Stefan Eletzhofer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[groovy: scripting PDMlink]]></title>
    <link href="http://seletz.github.com/blog/2012/01/08/groovy-scripting-pdmlink/"/>
    <updated>2012-01-08T20:33:00+01:00</updated>
    <id>http://seletz.github.com/blog/2012/01/08/groovy-scripting-pdmlink</id>
    <content type="html"><![CDATA[<p>In this post I'll explore how <code>groovy</code> may be used to script <code>Windchill PDMlink</code>.</p>

<!-- more -->


<h2>Setting up the classpath</h2>

<p>To have acces sto the <code>PDMlink</code> libraries, I'll add a locally mounted <code>codebase</code>
directory to the <code>$CLASSPATH</code>:</p>

<pre><code>$ echo $WT_HOME
/Volumes/settr-vm-ptc/Windchill
$ wtclasspath
export CLASSPATH=:/Volumes/settr-vm-ptc/Windchill/codebas...
$ $(wtclasspath)
</code></pre>

<p>The <code>wtclasspath</code>script looks like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>wtclasspath (wtclasspath)</span> <a href='/downloads/code/shell/wtclasspath'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="k">function </span>setup_classpath<span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>	<span class="k">for </span>jar in <span class="k">$(</span>find <span class="nv">$WT_HOME</span>/codebase/WEB-INF -name <span class="s2">&quot;*.jar&quot;</span><span class="k">)</span>; <span class="k">do</span>
</span><span class='line'><span class="k">		</span><span class="nv">cp</span><span class="o">=</span><span class="nv">$cp</span>:<span class="nv">$jar</span>
</span><span class='line'>	<span class="k">done</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>setup_classpath
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;export CLASSPATH=$cp:$WT_HOME/codebase&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Logging In</h2>

<p>To log in, we need to fetch the <code>RemoteMethodServer</code> and set username and password:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>logging in (wt_login.groovy)</span> <a href='/downloads/code/groovy/wt_login.groovy'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">wt.method.RemoteMethodServer</span>
</span><span class='line'>
</span><span class='line'><span class="n">ms</span> <span class="o">=</span> <span class="n">RemoteMethodServer</span><span class="o">.</span><span class="na">getDefault</span><span class="o">()</span>
</span><span class='line'><span class="n">ms</span><span class="o">.</span><span class="na">setUserName</span><span class="o">(</span><span class="s">&quot;orgadmin&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">ms</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&quot;orgadmin&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>After this, we're able to use the <strong>windchill API</strong>.</p>

<h2>Fetching PDMlink Business Objects by Reference</h2>

<p>Fetching a business object using it's <em>Object Reference String</em> translates
also quite well to groovy:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>fetch a object (wt_docinfo.groovy)</span> <a href='/downloads/code/groovy/wt_docinfo.groovy'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">wt.method.RemoteMethodServer</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.ptc.wvs.server.util.PublishUtils</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">def</span> <span class="nf">login</span><span class="o">(</span><span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ms</span> <span class="o">=</span> <span class="n">RemoteMethodServer</span><span class="o">.</span><span class="na">getDefault</span><span class="o">()</span>
</span><span class='line'>    <span class="n">ms</span><span class="o">.</span><span class="na">setUserName</span><span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">user</span><span class="o">)</span>
</span><span class='line'>    <span class="n">ms</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">password</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">ms</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">def</span> <span class="n">getObjectFromOR</span> <span class="o">=</span> <span class="o">{</span> <span class="n">oid</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">PublishUtils</span><span class="o">.</span><span class="na">getObjectFromRef</span><span class="o">(</span><span class="n">oid</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">def</span> <span class="n">getORFromObject</span> <span class="o">=</span> <span class="o">{</span> <span class="n">obj</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">PublishUtils</span><span class="o">.</span><span class="na">getRefFromObject</span><span class="o">(</span><span class="n">obj</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// log in</span>
</span><span class='line'><span class="n">login</span><span class="o">(</span><span class="nl">user:</span> <span class="s">&quot;orgadmin&quot;</span><span class="o">,</span> <span class="nl">password:</span> <span class="s">&quot;orgadmin&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// fetch a object by using a OR</span>
</span><span class='line'><span class="n">def</span> <span class="n">oid</span> <span class="o">=</span> <span class="s">&quot;VR:wt.epm.EPMDocument:8483330&quot;</span>
</span><span class='line'><span class="n">def</span> <span class="n">doc</span> <span class="o">=</span> <span class="n">getObjectFromOR</span><span class="o">(</span><span class="n">oid</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// We&#39;re able to access the properties of the EPMDocument</span>
</span><span class='line'><span class="n">println</span> <span class="s">&quot;${doc.displayIdentifier} [${doc.state} ${doc.type}] ${getORFromObject(doc)}&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// for the &quot;inspact last&quot; feature of groovyConsole </span>
</span><span class='line'><span class="k">return</span> <span class="n">doc</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Running this script is easy:</p>

<pre><code>$ groovy -cp $CLASSPATH wt_docinfo.groovy
k06__core-coil_cc0000000.asm, -.17 [RELEASED CAD-Dokument] OR:wt.epm.EPMDocument:112511174
</code></pre>

<p>But this is all quite basic, and not using the <strong>groovy</strong> language features very much at all.</p>

<h2>Fetching all iterations of an object</h2>

<p>Now we're going to use the <code>VersionControlHelper</code> service to fetch all iterations of an
object and print some information.  Please note how <strong>groovy</strong> makes it easy to traverse
collections using <code>each</code> and a <em>closure</em>.  Also note the <code>import ... as ...</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>printing iteration history (wt_iterations.groovy)</span> <a href='/downloads/code/groovy/wt_iterations.groovy'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">wt.method.RemoteMethodServer</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.ptc.wvs.server.util.PublishUtils</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">wt.vc.VersionControlHelper</span> <span class="n">as</span> <span class="n">VCH</span>
</span><span class='line'>
</span><span class='line'><span class="n">def</span> <span class="nf">login</span><span class="o">(</span><span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ms</span> <span class="o">=</span> <span class="n">RemoteMethodServer</span><span class="o">.</span><span class="na">getDefault</span><span class="o">()</span>
</span><span class='line'>    <span class="n">ms</span><span class="o">.</span><span class="na">setUserName</span><span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">user</span><span class="o">)</span>
</span><span class='line'>    <span class="n">ms</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">password</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">ms</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">def</span> <span class="nf">getObjectFromOR</span><span class="o">(</span><span class="n">oid</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">PublishUtils</span><span class="o">.</span><span class="na">getObjectFromRef</span><span class="o">(</span><span class="n">oid</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">def</span> <span class="nf">getORFromObject</span><span class="o">(</span><span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">PublishUtils</span><span class="o">.</span><span class="na">getRefFromObject</span><span class="o">(</span><span class="n">obj</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">def</span> <span class="nf">info</span><span class="o">(</span><span class="n">doc</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="s">&quot;${doc.displayIdentifier} [${doc.state} ${doc.type}] ${getORFromObject(doc)}&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// log in</span>
</span><span class='line'><span class="n">login</span><span class="o">(</span><span class="nl">user:</span> <span class="s">&quot;orgadmin&quot;</span><span class="o">,</span> <span class="nl">password:</span> <span class="s">&quot;orgadmin&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// fetch a object by using a OR</span>
</span><span class='line'><span class="n">def</span> <span class="n">oid</span> <span class="o">=</span> <span class="s">&quot;VR:wt.epm.EPMDocument:8483330&quot;</span>
</span><span class='line'><span class="n">def</span> <span class="n">doc</span> <span class="o">=</span> <span class="n">getObjectFromOR</span><span class="o">(</span><span class="n">oid</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">VCH</span><span class="o">.</span><span class="na">service</span><span class="o">.</span><span class="na">allIterationsOf</span><span class="o">(</span><span class="n">doc</span><span class="o">.</span><span class="na">master</span><span class="o">).</span><span class="na">each</span> <span class="o">{</span> <span class="n">obj</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">println</span> <span class="nf">info</span><span class="o">(</span><span class="n">obj</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The output:</p>

<pre><code>$ groovy -cp $CLASSPATH wt_iterations.groovy
k06__core-coil_cc0000000.asm, -.17 [RELEASED CAD-Dokument] OR:wt.epm.EPMDocument:112511174
k06__core-coil_cc0000000.asm, -.16 [INWORK CAD-Dokument] OR:wt.epm.EPMDocument:105876837
k06__core-coil_cc0000000.asm, -.15 [INWORK CAD-Dokument] OR:wt.epm.EPMDocument:95189959
k06__core-coil_cc0000000.asm, -.14 [INWORK CAD-Dokument] OR:wt.epm.EPMDocument:86656605
k06__core-coil_cc0000000.asm, -.13 [INWORK CAD-Dokument] OR:wt.epm.EPMDocument:67720806
k06__core-coil_cc0000000.asm, -.12 [INWORK CAD-Dokument] OR:wt.epm.EPMDocument:57847775
k06__core-coil_cc0000000.asm, -.11 [INWORK CAD-Dokument] OR:wt.epm.EPMDocument:46825566
k06__core-coil_cc0000000.asm, -.10 [INWORK CAD-Dokument] OR:wt.epm.EPMDocument:44606524
k06__core-coil_cc0000000.asm, -.9 [INWORK CAD-Dokument] OR:wt.epm.EPMDocument:39832260
k06__core-coil_cc0000000.asm, -.8 [INWORK CAD-Dokument] OR:wt.epm.EPMDocument:31441018
k06__core-coil_cc0000000.asm, -.7 [INWORK CAD-Dokument] OR:wt.epm.EPMDocument:31417993
k06__core-coil_cc0000000.asm, -.6 [INWORK CAD-Dokument] OR:wt.epm.EPMDocument:30833875
k06__core-coil_cc0000000.asm, -.5 [INWORK CAD-Dokument] OR:wt.epm.EPMDocument:28909290
k06__core-coil_cc0000000.asm, -.4 [INWORK CAD-Dokument] OR:wt.epm.EPMDocument:11014342
</code></pre>

<p>Cool, eh?  The code <em>almost</em> looks like <strong>coffee script</strong> to me!</p>

<h2>Using the GroovyConsole and the Object Browser</h2>

<p>I'm no big fan of using heavy UIs when programming -- I'm a avid user of <em>MacVIM</em> after all -- but
being able to <em>explore</em> live-objects sounded at least interesting to me.</p>

<p>So, I fired up the <code>groovyConsole</code>:</p>

<pre><code>$ groovyConsole -cp $CLASSPATH wt_docinfo.groovy 
</code></pre>

<p><img class="center" src="http://dl.dropbox.com/u/154097/blog-images/groovy-object-browser.jpg" title="browsing a EPMDocument" alt="groovy object browser"></p>

<h2>Conclusion</h2>

<p>The experiments so far have been promising.  What I want to explore further is:</p>

<ul>
<li>runtime performance compared to <strong>jython</strong></li>
<li>importing <strong>groovy</strong> classes in java (should be a no-brainer)</li>
<li>creating a servlet using <strong>groovy</strong>, using <code>Groovy Server Pages</code></li>
<li>all of the above together in the <strong>Windchill</strong> context</li>
<li>doing a side-by-side comparsion of <strong>jython</strong> and <strong>groovy</strong> code</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[experiments with groovy]]></title>
    <link href="http://seletz.github.com/blog/2012/01/05/experiments-with-groovy/"/>
    <updated>2012-01-05T17:30:00+01:00</updated>
    <id>http://seletz.github.com/blog/2012/01/05/experiments-with-groovy</id>
    <content type="html"><![CDATA[<p>In my constant task to hone and resharpen my tools, I've started some experiments
with <strong>groovy</strong>.</p>

<!-- more -->


<p>Groovy is a scripting language which runs on top of the <em>JVM</em> like <em>Jython</em> or <em>jRuby</em>.  But
unlike other scripting languages, <strong>groovy</strong> classes are full-blown Java classes and can be used
within plain Java.  Also, any Java package can be used in groovy without writing bridges and
stuff.</p>

<p>Also it seems that <strong>groovy</strong> fits my python and coffee-script infested brain better than the more
modern and hip cousins <strong>clojure</strong> and <strong>scala</strong>.</p>

<p>So what does it look like?  Grok this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>maps, adding and iterating over items (mapkeys.groovy)</span> <a href='/downloads/code/groovy/mapkeys.groovy'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">def</span> <span class="n">map</span> <span class="o">=</span> <span class="o">[:]</span>
</span><span class='line'>
</span><span class='line'><span class="n">map</span><span class="o">.</span><span class="na">some_key</span> <span class="o">=</span> <span class="s">&quot;value&quot;</span>
</span><span class='line'><span class="n">map</span><span class="o">.</span><span class="na">another_key</span> <span class="o">=</span> <span class="s">&quot;foo&quot;</span>
</span><span class='line'><span class="n">map</span><span class="o">[</span><span class="s">&quot;yet another key&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="s">&quot;bar&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">map</span><span class="o">.</span><span class="na">each</span> <span class="o">{</span> <span class="n">item</span> <span class="o">-&gt;</span>
</span><span class='line'>	<span class="n">println</span> <span class="s">&quot;$item.key =&gt; $item.value&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// implicit maps</span>
</span><span class='line'><span class="n">def</span> <span class="n">errors</span> <span class="o">=</span> <span class="o">[</span> <span class="nl">EINVAL:</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="nl">ENOSPC:</span> <span class="o">-</span><span class="mi">3</span><span class="o">,</span> <span class="nl">EPROTO:</span> <span class="o">-</span><span class="mi">42</span><span class="o">]</span> <span class="c1">// just some example</span>
</span><span class='line'><span class="n">println</span> <span class="n">errors</span><span class="o">.</span><span class="na">EINVAL</span>  <span class="c1">// -1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>(note: I did'nt succeed in getting the groovy lexer running in pygments and octopress, so
no syntax coloring. oh well.)</p>

<p>This looks pretty readable to me!</p>

<h2>classes, closures, iterators -- oh my</h2>

<p><strong>groovy</strong> is fully OO -- grok this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>maps, adding and iterating over items (mapkeys.groovy)</span> <a href='/downloads/code/groovy/mapkeys.groovy'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">def</span> <span class="n">map</span> <span class="o">=</span> <span class="o">[:]</span>
</span><span class='line'>
</span><span class='line'><span class="n">map</span><span class="o">.</span><span class="na">some_key</span> <span class="o">=</span> <span class="s">&quot;value&quot;</span>
</span><span class='line'><span class="n">map</span><span class="o">.</span><span class="na">another_key</span> <span class="o">=</span> <span class="s">&quot;foo&quot;</span>
</span><span class='line'><span class="n">map</span><span class="o">[</span><span class="s">&quot;yet another key&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="s">&quot;bar&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">map</span><span class="o">.</span><span class="na">each</span> <span class="o">{</span> <span class="n">item</span> <span class="o">-&gt;</span>
</span><span class='line'>	<span class="n">println</span> <span class="s">&quot;$item.key =&gt; $item.value&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// implicit maps</span>
</span><span class='line'><span class="n">def</span> <span class="n">errors</span> <span class="o">=</span> <span class="o">[</span> <span class="nl">EINVAL:</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="nl">ENOSPC:</span> <span class="o">-</span><span class="mi">3</span><span class="o">,</span> <span class="nl">EPROTO:</span> <span class="o">-</span><span class="mi">42</span><span class="o">]</span> <span class="c1">// just some example</span>
</span><span class='line'><span class="n">println</span> <span class="n">errors</span><span class="o">.</span><span class="na">EINVAL</span>  <span class="c1">// -1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The block enclosed in curly braces is a <em>closure</em>.  They're objects, too:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>fun with closures (closure.groovy)</span> <a href='/downloads/code/groovy/closure.groovy'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// a closure</span>
</span><span class='line'><span class="n">def</span> <span class="n">closure</span> <span class="o">=</span> <span class="o">{</span> <span class="n">a</span><span class="o">,</span> <span class="n">b</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// let&#39;s call it</span>
</span><span class='line'><span class="n">println</span> <span class="n">closure</span><span class="o">.</span><span class="na">call</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">)</span>  <span class="c1">// 3</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// same, less verbose</span>
</span><span class='line'><span class="n">println</span> <span class="nf">closure</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">)</span>  <span class="c1">// 3</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// we can also accept a closure as a parameter</span>
</span><span class='line'><span class="n">def</span> <span class="nf">when</span><span class="o">(</span><span class="n">condition</span><span class="o">,</span> <span class="n">closure</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>	<span class="k">if</span> <span class="o">(</span><span class="n">condition</span><span class="o">)</span>
</span><span class='line'>		<span class="n">closure</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">when</span> <span class="o">(</span><span class="mi">4</span><span class="o">&lt;</span><span class="mi">5</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>	<span class="n">println</span> <span class="s">&quot;yay!&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">def</span> <span class="n">local</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'><span class="n">def</span> <span class="n">test</span> <span class="o">=</span> <span class="o">{</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">local</span> <span class="o">+</span> <span class="n">x</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span> <span class="s">&quot;test(2) =&gt; ${test(2)}&quot;</span> <span class="c1">// test(2) =&gt; 4</span>
</span><span class='line'><span class="n">local</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="n">println</span> <span class="s">&quot;test(2) =&gt; ${test(2)}&quot;</span> <span class="c1">// test(2) =&gt; 5</span>
</span><span class='line'>
</span><span class='line'><span class="n">def</span> <span class="n">test2</span> <span class="o">=</span> <span class="o">{</span> <span class="n">x</span> <span class="o">-&gt;</span>
</span><span class='line'>	<span class="n">def</span> <span class="n">local2</span> <span class="o">=</span> <span class="n">x</span>
</span><span class='line'>	<span class="k">return</span> <span class="o">{</span> <span class="n">k</span> <span class="o">-&gt;</span> <span class="n">k</span> <span class="o">+</span> <span class="n">local2</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">def</span> <span class="n">test_2</span> <span class="o">=</span> <span class="n">test2</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'><span class="n">def</span> <span class="n">test_3</span> <span class="o">=</span> <span class="n">test2</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span> <span class="s">&quot;test_2(2) =&gt; ${test_2(2)}&quot;</span> <span class="c1">// test_2(2) =&gt; 4</span>
</span><span class='line'><span class="n">println</span> <span class="s">&quot;test_3(2) =&gt; ${test_3(2)}&quot;</span> <span class="c1">// test_3(2) =&gt; 5</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Another nice thing is how classes are defined and how <strong>groovy</strong> creates automatic
constructors:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>classes and constructors (class.groovy)</span> <a href='/downloads/code/groovy/class.groovy'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// a simple class.   Note that we do not define a constructor.</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
</span><span class='line'>	<span class="kd">public</span> <span class="n">String</span> <span class="n">name</span>
</span><span class='line'>	<span class="kd">public</span> <span class="n">Integer</span> <span class="n">age</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">def</span> <span class="n">anonymous</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">()</span>
</span><span class='line'><span class="n">def</span> <span class="n">stefan</span>    <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">(</span> <span class="nl">name:</span> <span class="s">&quot;Stefan&quot;</span><span class="o">,</span> <span class="nl">age:</span> <span class="mi">38</span><span class="o">)</span>
</span><span class='line'><span class="n">def</span> <span class="n">fritz</span>     <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">(</span> <span class="nl">name:</span> <span class="s">&quot;Fritz&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span> <span class="s">&quot;${stefan.name} is ${stefan.age} years old.&quot;</span> <span class="c1">// stefan is 38 years old.</span>
</span><span class='line'><span class="n">println</span> <span class="s">&quot;${fritz.name} is ${fritz.age} years old.&quot;</span> <span class="c1">// fritz is null years old.</span>
</span><span class='line'>
</span><span class='line'><span class="n">stefan</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="mi">35</span> <span class="c1">// no setters and getters needed!</span>
</span><span class='line'><span class="n">println</span> <span class="s">&quot;${stefan.name} is ${stefan.age} years old.&quot;</span> <span class="c1">// stefan is 35 years old.</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// coerce a map to a class.  Will call named-arg automatic ctor</span>
</span><span class='line'><span class="n">def</span> <span class="n">maja</span> <span class="o">=</span> <span class="o">[</span><span class="nl">name:</span><span class="s">&quot;Maja&quot;</span><span class="o">,</span> <span class="nl">age:</span><span class="mi">8</span><span class="o">]</span> <span class="n">as</span> <span class="n">Person</span>
</span><span class='line'><span class="n">println</span> <span class="s">&quot;${maja.name} is ${maja.age} years old.&quot;</span> <span class="c1">// maja is 8 years old.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Notice how we did <strong>not</strong> need to specify getter and setter methods.  Also notice
how <strong>groovy</strong> uses named arguments!</p>

<h2>What's next?</h2>

<p>Well.  Next up, I'll try to get some <code>PDMlink</code> stuff working with <strong>groovy</strong>.</p>

<h2>Links</h2>

<p>You can find <strong>groovy</strong> documentation at <a href="http://groovy.codehaus.org/" title="Groovy at codehaus">codehaus</a>.  There's also a zone
over at <a href="http://groovy.dzone.com/" title="Groovy Zone">dzone</a>.</p>

<p>There's also a API documentation of the <a href="http://groovy.codehaus.org/api/overview-summary.html" title="Groovy JDK">groovy JDK</a>.</p>
]]></content>
  </entry>
  
</feed>
