<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://seletz.github.com/atom.xml" rel="self"/>
  <link href="http://seletz.github.com/"/>
  <updated>2012-01-08T21:57:45+01:00</updated>
  <id>http://seletz.github.com/</id>
  <author>
    <name><![CDATA[Stefan Eletzhofer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[switch from bash to zsh]]></title>
    <link href="http://seletz.github.com/blog/2012/01/06/switch-from-bash-to-zsh/"/>
    <updated>2012-01-06T13:03:00+01:00</updated>
    <id>http://seletz.github.com/blog/2012/01/06/switch-from-bash-to-zsh</id>
    <content type="html"><![CDATA[<p>I finally came around to switch from <code>bash</code> to <code>zsh</code>.  While reading <a href="https://news.ycombinator.com" title="hackernews">hacker news</a>
I found a nice little setup on <em>github</em>: <a href="https://github.com/robbyrussell/oh-my-zsh" title="oh-my-zsh">oh-my-zsh</a></p>

<!-- more -->


<h2>Installation</h2>

<p>Installation was quite easy:</p>

<pre><code>$ brew install zsh
$ cd $HOME
$ git clone https://github.com/robbyrussell/oh-my-zsh.git .oh-my-zsh
$ sudo chsh zsh
</code></pre>

<h2>Configuration</h2>

<p>I did very little configuration.  All I really did is to choose a nice
theme from the many available themes.  Anyhow, my <code>.zshrc</code> looks like this:</p>

<figure class='code'><figcaption><span>.zshrc (zshrc)</span> <a href='http://seletz.github.com/downloads/code/shell/zshrc'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Path to your oh-my-zsh configuration.</span>
</span><span class='line'><span class="nv">ZSH</span><span class="o">=</span><span class="nv">$HOME</span>/.oh-my-zsh
</span><span class='line'>
</span><span class='line'><span class="c"># Set name of the theme to load.</span>
</span><span class='line'><span class="c"># Look in ~/.oh-my-zsh/themes/</span>
</span><span class='line'><span class="c"># Optionally, if you set this to &quot;random&quot;, it&#39;ll load a random theme each</span>
</span><span class='line'><span class="c"># time that oh-my-zsh is loaded.</span>
</span><span class='line'><span class="nv">ZSH_THEME</span><span class="o">=</span><span class="s2">&quot;nanotech&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Example aliases</span>
</span><span class='line'><span class="c"># alias zshconfig=&quot;mate ~/.zshrc&quot;</span>
</span><span class='line'><span class="c"># alias ohmyzsh=&quot;mate ~/.oh-my-zsh&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Set to this to use case-sensitive completion</span>
</span><span class='line'><span class="c"># CASE_SENSITIVE=&quot;true&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Comment this out to disable weekly auto-update checks</span>
</span><span class='line'><span class="c"># DISABLE_AUTO_UPDATE=&quot;true&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Uncomment following line if you want to disable colors in ls</span>
</span><span class='line'><span class="c"># DISABLE_LS_COLORS=&quot;true&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Uncomment following line if you want to disable autosetting terminal title.</span>
</span><span class='line'><span class="c"># DISABLE_AUTO_TITLE=&quot;true&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Uncomment following line if you want red dots to be displayed while waiting for completion</span>
</span><span class='line'><span class="c"># COMPLETION_WAITING_DOTS=&quot;true&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)</span>
</span><span class='line'><span class="c"># Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/</span>
</span><span class='line'><span class="c"># Example format: plugins=(rails git textmate ruby lighthouse)</span>
</span><span class='line'><span class="nv">plugins</span><span class="o">=(</span>osx git git-flow fabric groovy grails python<span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">source</span> <span class="nv">$ZSH</span>/oh-my-zsh.sh
</span><span class='line'>
</span><span class='line'><span class="c"># Customize to your needs...</span>
</span><span class='line'>
</span><span class='line'><span class="c">#---------------------------------------------------------------------</span>
</span><span class='line'><span class="c"># prompt and path</span>
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span>~/bin:/usr/local/bin:/usr/local/sbin:/usr/local/mysql/bin:<span class="nv">$PATH</span>
</span><span class='line'>
</span><span class='line'><span class="c">#---------------------------------------------------------------------</span>
</span><span class='line'><span class="c"># env setup</span>
</span><span class='line'><span class="nb">export </span><span class="nv">LANG</span><span class="o">=</span><span class="s2">&quot;de_DE.UTF-8&quot;</span>
</span><span class='line'><span class="c"># gnuchlog vim plugin</span>
</span><span class='line'><span class="nb">export </span><span class="nv">EMAIL</span><span class="o">=</span><span class="s2">&quot;Stefan Eletzhofer &lt;stefan.eletzhofer@nexiles.de&gt;&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">EDITOR</span><span class="o">=</span><span class="s2">&quot;/Applications/MacVim.app/Contents/MacOS/Vim -g -f &quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c">#---------------------------------------------------------------------</span>
</span><span class='line'><span class="c"># python</span>
</span><span class='line'><span class="nb">export </span><span class="nv">PYTHONSTARTUP</span><span class="o">=</span>~/.pyinit
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">VIRTUALENVWRAPPER_PYTHON</span><span class="o">=</span>/usr/bin/python2.6
</span><span class='line'><span class="nb">export </span><span class="nv">WORKON_HOME</span><span class="o">=</span>~/.virtualenvs
</span><span class='line'><span class="nb">export </span><span class="nv">PROJECT_HOME</span><span class="o">=</span><span class="nv">$HOME</span>/develop
</span><span class='line'><span class="nb">export </span><span class="nv">VIRTUALENV_ROOT</span><span class="o">=</span><span class="nv">$WORKON_HOME</span>
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">JYTHON_HOME</span><span class="o">=</span><span class="k">$(</span>brew --prefix jython<span class="k">)</span>/libexec
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:<span class="nv">$JYTHON_HOME</span>/bin
</span><span class='line'>
</span><span class='line'>. /usr/local/bin/virtualenvwrapper.sh
</span><span class='line'>
</span><span class='line'><span class="c">#---------------------------------------------------------------------</span>
</span><span class='line'><span class="c"># NODE.JS</span>
</span><span class='line'><span class="nb">export </span><span class="nv">NODE_PATH</span><span class="o">=</span>/usr/local/lib/node
</span><span class='line'><span class="nb">export </span><span class="nv">JS_CMD</span><span class="o">=</span>node
</span><span class='line'>
</span><span class='line'><span class="c">#---------------------------------------------------------------------</span>
</span><span class='line'><span class="c"># Ruby RVM</span>
</span><span class='line'><span class="nb">source</span> ~/.rvm/scripts/rvm
</span><span class='line'>
</span><span class='line'><span class="c">#---------------------------------------------------------------------</span>
</span><span class='line'><span class="c"># GROOVY</span>
</span><span class='line'><span class="nb">export </span><span class="nv">GROOVY_HOME</span><span class="o">=</span><span class="k">$(</span>brew --prefix groovy<span class="k">)</span>/libexec
</span><span class='line'>
</span><span class='line'><span class="c">#---------------------------------------------------------------------</span>
</span><span class='line'><span class="c"># alias</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">ls</span><span class="o">=</span><span class="s2">&quot;gls --color&quot;</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">la</span><span class="o">=</span><span class="s2">&quot;ls -la&quot;</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">ll</span><span class="o">=</span><span class="s2">&quot;ls -l&quot;</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">serve</span><span class="o">=</span><span class="s2">&quot;python -mSimpleHTTPServer&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c">#---------------------------------------------------------------------</span>
</span><span class='line'><span class="c"># direnv hook</span>
</span><span class='line'><span class="nb">eval</span> <span class="sb">`</span>direnv hook <span class="nv">$0</span><span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&#8217;s how my terminal looks like now.  I&#8217;m using the <a href="http://ethanschoonover.com/solarized" title="solarized">solarized</a> colour scheme,
and i&#8217;m using the <code>nanotech</code> theme:</p>

<p><img class="center" src="http://dl.dropbox.com/u/154097/blog-images/zsh-theme.jpg" title="my zsh theme" alt="zsh terminal screenshot"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[experiments with groovy]]></title>
    <link href="http://seletz.github.com/blog/2012/01/05/experiments-with-groovy/"/>
    <updated>2012-01-05T17:30:00+01:00</updated>
    <id>http://seletz.github.com/blog/2012/01/05/experiments-with-groovy</id>
    <content type="html"><![CDATA[<p>In my constant task to hone and resharpen my tools, I&#8217;ve started some experiments
with <strong>groovy</strong>.</p>

<!-- more -->


<p>Groovy is a scripting language which runs on top of the <em>JVM</em> like <em>Jython</em> or <em>jRuby</em>.  But
unlike other scripting languages, <strong>groovy</strong> classes are full-blown Java classes and can be used
within plain Java.  Also, any Java package can be used in groovy without writing bridges and
stuff.</p>

<p>Also it seems that <strong>groovy</strong> fits my python and coffee-script infested brain better than the more
modern and hip cousins <strong>clojure</strong> and <strong>scala</strong>.</p>

<p>So what does it look like?  Grok this:</p>

<figure class='code'><figcaption><span>maps, adding and iterating over items (mapkeys.groovy)</span> <a href='http://seletz.github.com/downloads/code/groovy/mapkeys.groovy'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">def</span> <span class="n">map</span> <span class="o">=</span> <span class="o">[:]</span>
</span><span class='line'>
</span><span class='line'><span class="n">map</span><span class="o">.</span><span class="na">some_key</span> <span class="o">=</span> <span class="s">&quot;value&quot;</span>
</span><span class='line'><span class="n">map</span><span class="o">.</span><span class="na">another_key</span> <span class="o">=</span> <span class="s">&quot;foo&quot;</span>
</span><span class='line'><span class="n">map</span><span class="o">[</span><span class="s">&quot;yet another key&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="s">&quot;bar&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">map</span><span class="o">.</span><span class="na">each</span> <span class="o">{</span> <span class="n">item</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">println</span> <span class="s">&quot;$item.key =&gt; $item.value&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// implicit maps</span>
</span><span class='line'><span class="n">def</span> <span class="n">errors</span> <span class="o">=</span> <span class="o">[</span> <span class="nl">EINVAL:</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="nl">ENOSPC:</span> <span class="o">-</span><span class="mi">3</span><span class="o">,</span> <span class="nl">EPROTO:</span> <span class="o">-</span><span class="mi">42</span><span class="o">]</span> <span class="c1">// just some example</span>
</span><span class='line'><span class="n">println</span> <span class="n">errors</span><span class="o">.</span><span class="na">EINVAL</span>  <span class="c1">// -1</span>
</span></code></pre></td></tr></table></div></figure>


<p>(note: I did&#8217;nt succeed in getting the groovy lexer running in pygments and octopress, so
no syntax coloring. oh well.)</p>

<p>This looks pretty readable to me!</p>

<h2>classes, closures, iterators &#8211; oh my</h2>

<p><strong>groovy</strong> is fully OO &#8211; grok this:</p>

<figure class='code'><figcaption><span>maps, adding and iterating over items (mapkeys.groovy)</span> <a href='http://seletz.github.com/downloads/code/groovy/mapkeys.groovy'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">def</span> <span class="n">map</span> <span class="o">=</span> <span class="o">[:]</span>
</span><span class='line'>
</span><span class='line'><span class="n">map</span><span class="o">.</span><span class="na">some_key</span> <span class="o">=</span> <span class="s">&quot;value&quot;</span>
</span><span class='line'><span class="n">map</span><span class="o">.</span><span class="na">another_key</span> <span class="o">=</span> <span class="s">&quot;foo&quot;</span>
</span><span class='line'><span class="n">map</span><span class="o">[</span><span class="s">&quot;yet another key&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="s">&quot;bar&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">map</span><span class="o">.</span><span class="na">each</span> <span class="o">{</span> <span class="n">item</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">println</span> <span class="s">&quot;$item.key =&gt; $item.value&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// implicit maps</span>
</span><span class='line'><span class="n">def</span> <span class="n">errors</span> <span class="o">=</span> <span class="o">[</span> <span class="nl">EINVAL:</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="nl">ENOSPC:</span> <span class="o">-</span><span class="mi">3</span><span class="o">,</span> <span class="nl">EPROTO:</span> <span class="o">-</span><span class="mi">42</span><span class="o">]</span> <span class="c1">// just some example</span>
</span><span class='line'><span class="n">println</span> <span class="n">errors</span><span class="o">.</span><span class="na">EINVAL</span>  <span class="c1">// -1</span>
</span></code></pre></td></tr></table></div></figure>


<p>The block enclosed in curly braces is a <em>closure</em>.  They&#8217;re objects, too:</p>

<figure class='code'><figcaption><span>fun with closures (closure.groovy)</span> <a href='http://seletz.github.com/downloads/code/groovy/closure.groovy'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// a closure</span>
</span><span class='line'><span class="n">def</span> <span class="n">closure</span> <span class="o">=</span> <span class="o">{</span> <span class="n">a</span><span class="o">,</span> <span class="n">b</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// let&#39;s call it</span>
</span><span class='line'><span class="n">println</span> <span class="n">closure</span><span class="o">.</span><span class="na">call</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">)</span>  <span class="c1">// 3</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// same, less verbose</span>
</span><span class='line'><span class="n">println</span> <span class="nf">closure</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">)</span>  <span class="c1">// 3</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// we can also accept a closure as a parameter</span>
</span><span class='line'><span class="n">def</span> <span class="nf">when</span><span class="o">(</span><span class="n">condition</span><span class="o">,</span> <span class="n">closure</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">condition</span><span class="o">)</span>
</span><span class='line'>      <span class="n">closure</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">when</span> <span class="o">(</span><span class="mi">4</span><span class="o">&lt;</span><span class="mi">5</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">println</span> <span class="s">&quot;yay!&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">def</span> <span class="n">local</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'><span class="n">def</span> <span class="n">test</span> <span class="o">=</span> <span class="o">{</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">local</span> <span class="o">+</span> <span class="n">x</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span> <span class="s">&quot;test(2) =&gt; ${test(2)}&quot;</span> <span class="c1">// test(2) =&gt; 4</span>
</span><span class='line'><span class="n">local</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="n">println</span> <span class="s">&quot;test(2) =&gt; ${test(2)}&quot;</span> <span class="c1">// test(2) =&gt; 5</span>
</span><span class='line'>
</span><span class='line'><span class="n">def</span> <span class="n">test2</span> <span class="o">=</span> <span class="o">{</span> <span class="n">x</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">def</span> <span class="n">local2</span> <span class="o">=</span> <span class="n">x</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">{</span> <span class="n">k</span> <span class="o">-&gt;</span> <span class="n">k</span> <span class="o">+</span> <span class="n">local2</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">def</span> <span class="n">test_2</span> <span class="o">=</span> <span class="n">test2</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'><span class="n">def</span> <span class="n">test_3</span> <span class="o">=</span> <span class="n">test2</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span> <span class="s">&quot;test_2(2) =&gt; ${test_2(2)}&quot;</span> <span class="c1">// test_2(2) =&gt; 4</span>
</span><span class='line'><span class="n">println</span> <span class="s">&quot;test_3(2) =&gt; ${test_3(2)}&quot;</span> <span class="c1">// test_3(2) =&gt; 5</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another nice thing is how classes are defined and how <strong>groovy</strong> creates automatic
constructors:</p>

<figure class='code'><figcaption><span>classes and constructors (class.groovy)</span> <a href='http://seletz.github.com/downloads/code/groovy/class.groovy'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// a simple class.   Note that we do not define a constructor.</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="n">name</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Integer</span> <span class="n">age</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">def</span> <span class="n">anonymous</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">()</span>
</span><span class='line'><span class="n">def</span> <span class="n">stefan</span>    <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">(</span> <span class="nl">name:</span> <span class="s">&quot;Stefan&quot;</span><span class="o">,</span> <span class="nl">age:</span> <span class="mi">38</span><span class="o">)</span>
</span><span class='line'><span class="n">def</span> <span class="n">fritz</span>     <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">(</span> <span class="nl">name:</span> <span class="s">&quot;Fritz&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span> <span class="s">&quot;${stefan.name} is ${stefan.age} years old.&quot;</span> <span class="c1">// stefan is 38 years old.</span>
</span><span class='line'><span class="n">println</span> <span class="s">&quot;${fritz.name} is ${fritz.age} years old.&quot;</span> <span class="c1">// fritz is null years old.</span>
</span><span class='line'>
</span><span class='line'><span class="n">stefan</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="mi">35</span> <span class="c1">// no setters and getters needed!</span>
</span><span class='line'><span class="n">println</span> <span class="s">&quot;${stefan.name} is ${stefan.age} years old.&quot;</span> <span class="c1">// stefan is 35 years old.</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// coerce a map to a class.  Will call named-arg automatic ctor</span>
</span><span class='line'><span class="n">def</span> <span class="n">maja</span> <span class="o">=</span> <span class="o">[</span><span class="nl">name:</span><span class="s">&quot;Maja&quot;</span><span class="o">,</span> <span class="nl">age:</span><span class="mi">8</span><span class="o">]</span> <span class="n">as</span> <span class="n">Person</span>
</span><span class='line'><span class="n">println</span> <span class="s">&quot;${maja.name} is ${maja.age} years old.&quot;</span> <span class="c1">// maja is 8 years old.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice how we did <strong>not</strong> need to specify getter and setter methods.  Also notice
how <strong>groovy</strong> uses named arguments!</p>

<h2>What&#8217;s next?</h2>

<p>Well.  Next up, I&#8217;ll try to get some <code>PDMlink</code> stuff working with <strong>groovy</strong>.</p>

<h2>Links</h2>

<p>You can find <strong>groovy</strong> documentation at <a href="http://groovy.codehaus.org/" title="Groovy at codehaus">codehaus</a>.  There&#8217;s also a zone
over at <a href="http://groovy.dzone.com/" title="Groovy Zone">dzone</a>.</p>

<p>There&#8217;s also a API documentation of the <a href="http://groovy.codehaus.org/api/overview-summary.html" title="Groovy JDK">groovy JDK</a>.</p>
]]></content>
  </entry>
  
</feed>
