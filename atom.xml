<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://seletz.github.com/atom.xml" rel="self"/>
  <link href="http://seletz.github.com/"/>
  <updated>2012-03-01T15:35:21+01:00</updated>
  <id>http://seletz.github.com/</id>
  <author>
    <name><![CDATA[Stefan Eletzhofer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Jython, Oracle and JDBC]]></title>
    <link href="http://seletz.github.com/blog/2012/02/28/jython-oracle-jdbc/"/>
    <updated>2012-02-28T08:21:00+01:00</updated>
    <id>http://seletz.github.com/blog/2012/02/28/jython-oracle-jdbc</id>
    <content type="html"><![CDATA[<p>I recently had the need to access a new table in an existing oracle database
using Jython.  I needed to atomically increase a field in for <strong>one</strong> row.</p>

<p>Here is what I came up with.</p>

<!-- more -->


<h2>Notes</h2>

<ul>
<li><p>The demo code relies on a existing table &#8216;NXTEST&#8217; in oracle.  I used navicat lite
to create this table.</p></li>
<li><p>The demo code locks a table row using &#8216;select &#8230; for update&#8217; to atomically increase
the SEQ column.</p></li>
<li><p>The requirement was that I could have a huge number of <code>name</code> entries,
all slightly different, each needing a separate counter.  I did&#8217;nt want
to create a <code>sequence</code> for each of them.</p></li>
</ul>


<h2>Gotchas</h2>

<ul>
<li><p>Apparently oracle <em>needs</em> upper cased table and column names.</p></li>
<li><p>I could not get oci connections to work.  This seems to be a <a href="https://forums.oracle.com/forums/thread.jspa?threadID=1080064" title="bug in 10.2">bug in 10.2</a></p></li>
<li><p>Because of a bug in Jython 2.5.2 wrt <code>__import__</code> I could not get
SQLAlchemy to work.</p></li>
</ul>


<figure class='code'><figcaption><span>jython-oracle-jdbs.py (jdbc-oracle.py)</span> <a href='http://seletz.github.com/downloads/code/python/jdbc-oracle.py'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">with_statement</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">logging</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">com.ziclix.python.sql</span> <span class="kn">import</span> <span class="n">zxJDBC</span>
</span><span class='line'>
</span><span class='line'><span class="n">logger</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">getLogger</span><span class="p">(</span><span class="s">&quot;nexiles.wt.demo&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">setup_logging</span><span class="p">(</span><span class="n">level</span><span class="o">=</span><span class="n">logging</span><span class="o">.</span><span class="n">DEBUG</span><span class="p">):</span>
</span><span class='line'>    <span class="n">logging</span><span class="o">.</span><span class="n">basicConfig</span><span class="p">(</span><span class="n">level</span><span class="o">=</span><span class="n">level</span><span class="p">,</span> <span class="n">format</span><span class="o">=</span><span class="s">&quot;</span><span class="si">%(asctime)s</span><span class="s"> [</span><span class="si">%(levelname)-7s</span><span class="s">] [line </span><span class="si">%(lineno)d</span><span class="s">] </span><span class="si">%(name)s</span><span class="s">: </span><span class="si">%(message)s</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_connection</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="n">sid</span><span class="p">,</span> <span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="p">):</span>
</span><span class='line'>    <span class="n">jdbc_url</span> <span class="o">=</span> <span class="s">&quot;jdbc:oracle:thin:@</span><span class="si">%(host)s</span><span class="s">:</span><span class="si">%(port)s</span><span class="s">:</span><span class="si">%(sid)s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="nb">locals</span><span class="p">()</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s">&quot;get_connection: jdbc_url=</span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">jdbc_url</span><span class="p">)</span>
</span><span class='line'>    <span class="n">driver</span> <span class="o">=</span> <span class="s">&quot;oracle.jdbc.driver.OracleDriver&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">zxJDBC</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">jdbc_url</span><span class="p">,</span> <span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="p">,</span> <span class="n">driver</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">update_sequence</span><span class="p">(</span><span class="n">cursor</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
</span><span class='line'>    <span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&quot;select NAME, SEQ from NXTEST where name = ? for update&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">name</span><span class="p">])</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">.</span><span class="n">fetchall</span><span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">result</span><span class="p">:</span>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s">&quot;UPDATE: </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">name</span><span class="p">)</span>
</span><span class='line'>        <span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&quot;update NXTEST set seq = seq + 1 where name = ?&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">name</span><span class="p">])</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s">&quot;CREATE: </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">name</span><span class="p">)</span>
</span><span class='line'>        <span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&quot;insert into NXTEST values (?, ?)&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">name</span><span class="p">,</span> <span class="mi">1</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&quot;select NAME, SEQ from NXTEST where name = ?&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">name</span><span class="p">])</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">.</span><span class="n">fetchall</span><span class="p">()</span>
</span><span class='line'>    <span class="n">_</span><span class="p">,</span> <span class="n">seq</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s">&quot;NAME: </span><span class="si">%s</span><span class="s"> =&gt; SEQ </span><span class="si">%03d</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">seq</span><span class="p">))</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">seq</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="n">username</span> <span class="o">=</span> <span class="s">&quot;****&quot;</span>
</span><span class='line'>    <span class="n">password</span> <span class="o">=</span> <span class="s">&quot;****&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">with</span> <span class="n">get_connection</span><span class="p">(</span><span class="s">&quot;example.com&quot;</span><span class="p">,</span> <span class="mi">1521</span><span class="p">,</span> <span class="s">&quot;orc4&quot;</span><span class="p">,</span> <span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="p">)</span> <span class="k">as</span> <span class="n">conn</span><span class="p">:</span>
</span><span class='line'>        <span class="k">with</span> <span class="n">conn</span><span class="p">:</span>
</span><span class='line'>            <span class="n">logger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s">&quot;connection: </span><span class="si">%r</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">conn</span><span class="p">)</span>
</span><span class='line'>            <span class="k">with</span> <span class="n">conn</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span> <span class="k">as</span> <span class="n">c</span><span class="p">:</span>
</span><span class='line'>                <span class="n">logger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s">&quot;cursor: </span><span class="si">%r</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">update_sequence</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="s">&quot;test-foo-bar&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="n">update_sequence</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="s">&quot;test-foo-bar&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="n">update_sequence</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="s">&quot;test-bar-bar&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="n">update_sequence</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="s">&quot;test-bar-bar&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="n">update_sequence</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="s">&quot;flirz-foo-bar&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="n">update_sequence</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="s">&quot;flirz-foo-bar&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="n">update_sequence</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="s">&quot;flirz-foo-bar&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">setup_logging</span><span class="p">()</span>
</span><span class='line'>    <span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[z3c.recipe.staticlxml moved to git]]></title>
    <link href="http://seletz.github.com/blog/2012/02/25/z3c-dot-recipe-dot-staticlxml-moved-to-git/"/>
    <updated>2012-02-25T14:35:00+01:00</updated>
    <id>http://seletz.github.com/blog/2012/02/25/z3c-dot-recipe-dot-staticlxml-moved-to-git</id>
    <content type="html"><![CDATA[<p>I&#8217;ve got a request to update my buildout recipe to build a statically
linked lxml library, I decided to move the repository to GitHub.  This way,
people can fork my code and submit pull requests.</p>

<p>As I ran into some issues during the process I did a quick writeup.</p>

<!-- more -->


<h2>Moving to git</h2>

<p>First I cheked GitHub for a <a href="http://help.github.com/import-from-subversion" title="tutorial">tutorial</a> &#8211; I&#8217;m lazy.</p>

<p>Then I tried to launch <code>git-svn</code> in my shell, tried to install it, until
I remembered that the actual command is <code>git svn</code>.  D&#8217;oh.</p>

<p>Then I ran into this error when importing the SVN repo:</p>

<pre><code>using existing [svn-remote "svn"]
Using higher level of URL: svn+ssh://seletz@svn.zope.org/repos/main/z3c.recipe.staticlxml =&gt; svn+ssh://seletz@svn.zope.org/repos/main
W: Ignoring error from SVN, path probably does not exist: (160013): Filesystem has no item: File not found: revision 100, path '/z3c.recipe.staticlxml'
W: Do not be alarmed at the above message git-svn is just searching aggressively for old history.
This may take a while on large repositories
r93394 = b27bb31b8e3f9048d7fbf639ebd89e6b33f47f36 (refs/remotes/trunk)
    A   bootstrap.py
    A   buildout.cfg
    A   CHANGES.txt
    A   setup.py
    A   src/z3c/__init__.py
    A   src/z3c/recipe/staticlxml/tests/__init__.py
    A   src/z3c/recipe/staticlxml/tests/test_docs.py
    A   src/z3c/recipe/staticlxml/__init__.py
    A   src/z3c/recipe/staticlxml/README.txt
    A   src/z3c/recipe/__init__.py
    A   CONTRIBUTORS.txt
    A   README.txt
W: +empty_dir: z3c.recipe.staticlxml/trunk/downloads
r93395 = 6898a232ff85dbfd6aff4e4f9dc959fe3b9fd443 (refs/remotes/trunk)
    M   buildout.cfg
    M   CHANGES.txt
    M   src/z3c/recipe/staticlxml/__init__.py
    M   src/z3c/recipe/staticlxml/README.txt
r93396 = 40feb0aa5f65476cf6fa7b8722e164660dd0c4e2 (refs/remotes/trunk)
    M   buildout.cfg
    M   CHANGES.txt
    M   src/z3c/recipe/staticlxml/__init__.py
r93397 = 1155246997d81732cdcb466c0b692edcd260d231 (refs/remotes/trunk)
    M   CHANGES.txt]
    M   setup.py
r93400 = 32375fd9ab8024c0f8b8ed0f40a3dad27a520a25 (refs/remotes/trunk)
Found possible branch point: svn+ssh://seletz@svn.zope.org/repos/main/z3c.recipe.staticlxml/trunk =&gt; svn+ssh://seletz@svn.zope.org/repos/main/z3c.recipe.staticlxml/branches/0.1, 93401
Use of uninitialized value $u in substitution (s///) at /usr/local/Cellar/git/1.7.9.1/libexec/git-core/git-svn line 2097.
Use of uninitialized value $u in concatenation (.) or string at /usr/local/Cellar/git/1.7.9.1/libexec/git-core/git-svn line 2097.
refs/remotes/svn/tags/0.1: 'svn+ssh://svn.zope.org/repos/main' not found in ''
</code></pre>

<p>Google reveals that this seems to be a git <a href="http://help.github.com/import-from-subversion" title="issue">issue</a>.</p>

<p>So, I updated to <code>git 1.7.9.2</code>, but still the same error.  More googling, and some perl hacking
I ended up with this diff:</p>

<pre><code>--- /usr/local/Cellar/git/1.7.9.2/libexec/git-core/git-svn.orig 2012-02-25 14:52:46.000000000 +0100
+++ /usr/local/Cellar/git/1.7.9.2/libexec/git-core/git-svn  2012-02-25 14:53:46.000000000 +0100
@@ -2094,8 +2094,12 @@
                    " globbed: $refname\n";
            }
            my $u = (::cmt_metadata("$refname"))[0];
-           $u =~ s!^\Q$url\E(/|$)!! or die
-             "$refname: '$url' not found in '$u'\n";
+           if (!$u) {
+               $u = $pathname;
+           } else {
+               $u =~ s!^\Q$url\E(/|$)!! or die
+                 "$refname: '$url' not found in '$u'\n";
+           }
            if ($pathname ne $u) {
                warn "W: Refspec glob conflict ",
                     "(ref: $refname):\n",
</code></pre>

<p>This seems to do the trick.</p>

<h2>Actual Commandline To Do The Conversion</h2>

<p>After hacking around the issues I got, the actual process is simple:</p>

<pre><code>$ mkdir z3c.recipe.staticlxml.git
$ cd z3c.recipe.staticlxml.git
$ sudo gem install svn2git
$ svn2git --verbose svn+ssh://seletz@svn.zope.org/repos/main/z3c.recipe.staticlxml
</code></pre>

<p>Then simply add the new remote and push:</p>

<pre><code>$ git remote add origin git@github.com:seletz/z3c.recipe.staticlxml.git
$ git push origin master
</code></pre>

<p>Now create a development branch:</p>

<pre><code>$ git co -b develop
$ git push origin develop
</code></pre>

<p>Now I&#8217;m ready to hack on this project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a RabbitMQ test setup with vagrant]]></title>
    <link href="http://seletz.github.com/blog/2012/01/18/creating-a-rabbitmq-test-setup-with-vagrant/"/>
    <updated>2012-01-18T16:00:00+01:00</updated>
    <id>http://seletz.github.com/blog/2012/01/18/creating-a-rabbitmq-test-setup-with-vagrant</id>
    <content type="html"><![CDATA[<p>In this post I&#8217;ll provide a writeup on how I created a test setup for
a project I&#8217;m working on.  The project uses <a href="http://www.rabbitmq.com/" title="RabbitMQ">RabbitMQ</a> to distribute
tasks to a worker, and the production system is a cluster of Apache/Tomcat
machines.</p>

<p>I&#8217;ll use <a href="http://vagrantup.com/" title="vagrant">vagrant</a> to create two test machines, one which runs <a href="http://www.rabbitmq.com/" title="RabbitMQ">RabbitMQ</a>, the other
one will run the actual worker code.</p>

<!-- more -->


<h2>Preparation</h2>

<p>I&#8217;ll have the <a href="http://vagrantup.com/" title="vagrant">vagrant</a> files in a subdirectory <code>vagrant</code> in my git repository.  I&#8217;ll
add the <code>Vagrantfile</code> and all provisioning scriptzs there::</p>

<pre><code>$ mkdir vagrant
</code></pre>

<p>The <code>Vagrantfile</code> looks like this::</p>

<figure class='code'><figcaption><span>[vagrant] [2]file (Vagrantfile-rabbitmq)</span> <a href='http://seletz.github.com/downloads/code/ruby/Vagrantfile-rabbitmq'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># -*- mode: ruby -*-</span>
</span><span class='line'><span class="c1"># vi: set ft=ruby ts=2 sw=2 expandtab:</span>
</span><span class='line'>
</span><span class='line'><span class="no">Vagrant</span><span class="o">::</span><span class="no">Config</span><span class="o">.</span><span class="n">run</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;ubuntu-natty-64&quot;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">define</span> <span class="ss">:rabbitmq</span> <span class="k">do</span> <span class="o">|</span><span class="n">rabbit_config</span><span class="o">|</span>
</span><span class='line'>    <span class="c1">#rabbit_config.vm.boot_mode = :gui</span>
</span><span class='line'>    <span class="n">rabbit_config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="n">box</span>
</span><span class='line'>    <span class="n">rabbit_config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span><span class="p">(</span><span class="s2">&quot;192.168.64.10&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">rabbit_config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="ss">:shell</span><span class="p">,</span> <span class="ss">:path</span> <span class="o">=&gt;</span> <span class="s2">&quot;rabbitmq.sh&quot;</span>
</span><span class='line'>    <span class="n">rabbit_config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">customize</span> <span class="k">do</span> <span class="o">|</span><span class="n">vm</span><span class="o">|</span>
</span><span class='line'>      <span class="n">vm</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;nexiles - rabbitmq&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">define</span> <span class="ss">:worker</span> <span class="k">do</span> <span class="o">|</span><span class="n">worker_config</span><span class="o">|</span>
</span><span class='line'>    <span class="n">worker_config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="n">box</span>
</span><span class='line'>    <span class="c1">#worker_config.vm.boot_mode = :gui</span>
</span><span class='line'>    <span class="n">worker_config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span><span class="p">(</span><span class="s2">&quot;192.168.64.20&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">worker_config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="ss">:shell</span><span class="p">,</span> <span class="ss">:path</span> <span class="o">=&gt;</span> <span class="s2">&quot;worker.sh&quot;</span>
</span><span class='line'>    <span class="n">worker_config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">share_folder</span><span class="p">(</span><span class="s2">&quot;src&quot;</span><span class="p">,</span> <span class="s2">&quot;/src&quot;</span><span class="p">,</span> <span class="s2">&quot;~/develop/nexiles/worker/src&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">worker_config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">customize</span> <span class="k">do</span> <span class="o">|</span><span class="n">vm</span><span class="o">|</span>
</span><span class='line'>      <span class="n">vm</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;nexiles - worker&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The configuration sets the machines up, such that:</p>

<ul>
<li>both have a IP to talk to eachother</li>
<li>on the rabbitmq machine I&#8217;ve used the shell provisioner to install
<a href="http://www.rabbitmq.com/" title="RabbitMQ">RabbitMQ</a> 2.7.1</li>
<li>on the worker machine I&#8217;ve used the shell provisioner to create a python
development environment in /opt</li>
<li>share my source folder on the worker</li>
</ul>


<p>Note: For some reason I wanted to have all the <a href="http://vagrantup.com/" title="vagrant">vagrant</a> stuff in a separate directory.  I
<strong>could</strong> have put the Vagrantfile in the top-level directory and thus saved me the additional
shared folder.  Oh well.</p>

<p>Here are the provisioning shell scripts::</p>

<figure class='code'><figcaption><span>rabbitmq.sh (vagrant-rabbitmq.sh)</span> <a href='http://seletz.github.com/downloads/code/shell/vagrant-rabbitmq.sh'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat &gt;&gt; /etc/apt/sources.list <span class="s">&lt;&lt;EOT</span>
</span><span class='line'><span class="s">deb http://www.rabbitmq.com/debian/ testing main</span>
</span><span class='line'><span class="s">EOT</span>
</span><span class='line'>
</span><span class='line'>wget http://www.rabbitmq.com/rabbitmq-signing-key-public.asc
</span><span class='line'>apt-key add rabbitmq-signing-key-public.asc
</span><span class='line'>
</span><span class='line'>apt-get update
</span><span class='line'>
</span><span class='line'>apt-get install -q -y screen htop vim curl wget
</span><span class='line'>apt-get install -q -y rabbitmq-server
</span><span class='line'>
</span><span class='line'><span class="c"># RabbitMQ Plugins</span>
</span><span class='line'>service rabbitmq-server stop
</span><span class='line'>rabbitmq-plugins <span class="nb">enable </span>rabbitmq_management
</span><span class='line'>rabbitmq-plugins <span class="nb">enable </span>rabbitmq_jsonrpc
</span><span class='line'>service rabbitmq-server start
</span><span class='line'>
</span><span class='line'>rabbitmq-plugins list
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c">#wget http://www.rabbitmq.com/releases/rabbitmq-server/v2.7.1/rabbitmq-server_2.7.1-1_all.deb</span>
</span><span class='line'><span class="c">#dpkg install rabbitmq-server_2.7.1-1_all.deb</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>worker.sh (vagrant-worker.sh)</span> <a href='http://seletz.github.com/downloads/code/shell/vagrant-worker.sh'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">NX_HOME</span><span class="o">=</span>/opt/nexiles
</span><span class='line'>
</span><span class='line'>apt-get install -q -y screen htop curl wget vim
</span><span class='line'>
</span><span class='line'>mkdir -p <span class="nv">$NX_HOME</span>/<span class="o">{</span>bin,downloads<span class="o">}</span>
</span><span class='line'>cat &gt; /etc/profile.d/nexiles.sh <span class="s">&lt;&lt; EOT</span>
</span><span class='line'><span class="s">export NX_HOME=$NX_HOME</span>
</span><span class='line'><span class="s">test -f &quot;\$NX_HOME/env.sh&quot; &amp;&amp; source \$NX_HOME/env.sh</span>
</span><span class='line'><span class="s">EOT</span>
</span><span class='line'>
</span><span class='line'><span class="c"># python environment</span>
</span><span class='line'>apt-get install -q -y python2.6
</span><span class='line'><span class="nb">cd</span> <span class="nv">$NX_HOME</span>
</span><span class='line'><span class="nb">export </span><span class="nv">PYTHON</span><span class="o">=</span>/usr/bin/python2.6
</span><span class='line'><span class="nb">export </span><span class="nv">PIP</span><span class="o">=</span>/usr/local/bin/pip
</span><span class='line'>curl -s http://peak.telecommunity.com/dist/ez_setup.py &gt; <span class="nv">$NX_HOME</span>/downloads/ez_setup.py
</span><span class='line'><span class="nv">$PYTHON</span> downloads/ez_setup.py -U
</span><span class='line'>
</span><span class='line'>easy_install-2.6 pip
</span><span class='line'><span class="nv">$PIP</span> install virtualenv
</span><span class='line'>
</span><span class='line'>virtualenv -p /usr/bin/python2.6 --clear <span class="nv">$NX_HOME</span>
</span><span class='line'>
</span><span class='line'>. <span class="nv">$NX_HOME</span>/bin/activate
</span><span class='line'>pip install requests
</span><span class='line'>pip install <span class="nv">kombu</span><span class="o">==</span>1.5.1
</span><span class='line'>
</span><span class='line'><span class="c"># fix permissions</span>
</span><span class='line'>chown -R vagrant <span class="nv">$NX_HOME</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Usage</h2>

<p>To use the system I now just need to do a::</p>

<pre><code>$ vagrant up
</code></pre>

<p>And I&#8217;m set.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Vagrant Base Boxes With veewee]]></title>
    <link href="http://seletz.github.com/blog/2012/01/17/creating-vagrant-base-boxes-with-veewee/"/>
    <updated>2012-01-17T08:26:00+01:00</updated>
    <id>http://seletz.github.com/blog/2012/01/17/creating-vagrant-base-boxes-with-veewee</id>
    <content type="html"><![CDATA[<p>In this post I show how to install and use <a href="http://github.com/jedi4ever/veewee" title="veewee">veewee</a> to create a new
base box for <a href="http://www.vagrantup.com" title="vagrant">vagrant</a>.  Then I&#8217;ll show how to use this new base box to
create a <a href="http://www.vagrantup.com" title="vagrant">vagrant</a> setup.</p>

<!-- more -->


<h2>Installing to a ruby rvm gemset</h2>

<p>Disclaimer: I&#8217;m <strong>completely</strong> new to <code>rvm</code> and all.  So please bear with
me.</p>

<p>I&#8217;ve used the <a href="https://rvm.beginrescueend.com/" title="rvm documentation">rvm documentation</a> to get this going (btw, awesome domain name).</p>

<p>So it seems that <code>rvm</code> is some kind of ruby&#8217;s <code>virtualenv</code>.  Let&#8217;s setup a
new environment using ruby 1.9.2, and then create a <code>gemset</code> which we&#8217;ll
use to install <a href="http://github.com/jedi4ever/veewee" title="veewee">veewee</a> with :</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rvm use 1.9.2
</span><span class='line'><span class="nv">$ </span>rvm gemset create veewee
</span><span class='line'><span class="nv">$ </span>rvm 1.9.2@veewee
</span><span class='line'><span class="nv">$ </span>gem install veewee
</span><span class='line'><span class="nv">$ </span>which vagrant
</span><span class='line'>/Users/seletz/.rvm/gems/ruby-1.9.2-p290@veewee192/bin/vagrant
</span></code></pre></td></tr></table></div></figure>


<p><strong>EDIT: the first version of this post had an error in the above
statements.  Thanks, oliver!</strong></p>

<p>So, whenever I want to use <a href="http://www.vagrantup.com" title="vagrant">vagrant</a> with the <a href="http://github.com/jedi4ever/veewee" title="veewee">veewee</a> extension, I need to
do a:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rvm 1.9.2@veewee
</span></code></pre></td></tr></table></div></figure>


<p>OK, fine.</p>

<h2>Testing</h2>

<p><a href="http://github.com/jedi4ever/veewee" title="veewee">veewee</a> promises that it can build <a href="http://www.vagrantup.com" title="vagrant">vagrant</a> base boxes from <em>scratch</em>
using templates.  Let&#8217;s test this and select a <em>ubuntu 11.04 64 bit
&#8220;natty&#8221;</em> template:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant basebox define <span class="s1">&#39;myubuntubox&#39;</span> <span class="s1">&#39;ubuntu-11.04-server-amd64&#39;</span>
</span><span class='line'><span class="nv">$ </span>tree
</span><span class='line'>.
</span><span class='line'>└── definitions
</span><span class='line'>    └── myubuntubox
</span><span class='line'>        ├── definition.rb
</span><span class='line'>        ├── postinstall.sh
</span><span class='line'>        └── preseed.cfg
</span><span class='line'>
</span><span class='line'>2 directories, 3 files
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://github.com/jedi4ever/veewee" title="veewee">veewee</a> created a directory <code>definitions</code> for us, which is basically a
copy of the template we selected.  We <em>could</em> change the definitions, but
we&#8217;ll do that later &#8211; I&#8217;ll just want to see if the basic process works.</p>

<p>Now let&#8217;s actually <em>build</em> the VM image which will eventually become our
new <a href="http://www.vagrantup.com" title="vagrant">vagrant</a> base box.  We did not change the definitions, and we did&#8217;nt
specify a <em>ISO</em> image, and thus <a href="http://github.com/jedi4ever/veewee" title="veewee">veewee</a> will download it to a <code>iso</code>
directory for us:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant basebox build <span class="s1">&#39;myubuntubox&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;s quite spectacular &#8211; the image will be booted and <a href="http://github.com/jedi4ever/veewee" title="veewee">veewee</a> will use
VBoxManage to send keystrokes to the VM &#8211; defining initial boot parameters
etc.  The net result is, that <code>veewe</code> will do a complete <em>headless</em>
install of the specified template (a ubuntu &#8220;natty&#8221; 64 bit server image in
this test) and install all the dependencies needed for the image to act as
a <a href="http://www.vagrantup.com" title="vagrant">vagrant</a> box.</p>

<p>Let&#8217;s verify the created image using the <code>verify</code> command:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant basebox validate <span class="s1">&#39;myubuntubox&#39;</span>
</span><span class='line'>...
</span><span class='line'>Failing Scenarios:
</span><span class='line'>cucumber /Users/seletz/.rvm/gems/ruby-1.9.2-p290@veewee192/gems/veewee-0.2.2/lib/veewee/../../validation/vagrant.feature:33 <span class="c"># Scenario: Checking chef</span>
</span><span class='line'>
</span><span class='line'>7 scenarios <span class="o">(</span>1 failed, 6 passed<span class="o">)</span>
</span><span class='line'>21 steps <span class="o">(</span>1 failed, 20 passed<span class="o">)</span>
</span><span class='line'>0m2.462s
</span></code></pre></td></tr></table></div></figure>


<p>Cool &#8211; they use ruby specs to actually test the image.  I&#8217;ve got one
failing spec regarding <code>chef</code> &#8211; I don&#8217;t plan to se <code>chef</code> for now,
so I&#8217;ll ignore this.</p>

<p>Up until now, all we have is a VirtualBox VM.  Now let&#8217;s export the VM
to an actual <a href="http://www.vagrantup.com" title="vagrant">vagrant</a> box file:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant basebox <span class="nb">export</span> <span class="s1">&#39;myubuntubox&#39;</span>
</span><span class='line'>Vagrant requires the box to be shutdown, before it can <span class="nb">export</span>
</span><span class='line'>Sudo also needs to work <span class="k">for </span>user vagrant
</span><span class='line'>Performing a clean shutdown now.
</span><span class='line'>Executing <span class="nb">command</span>: sudo shutdown -P now
</span><span class='line'>...
</span><span class='line'>Machine myubuntubox is powered off cleanly
</span><span class='line'>Executing vagrant voodoo:
</span><span class='line'>vagrant package --base <span class="s1">&#39;myubuntubox&#39;</span> --output <span class="s1">&#39;myubuntubox.box&#39;</span>
</span><span class='line'>
</span><span class='line'>To import it into vagrant <span class="nb">type</span>:
</span><span class='line'>vagrant box add <span class="s1">&#39;myubuntubox&#39;</span> <span class="s1">&#39;myubuntubox.box&#39;</span>
</span><span class='line'>
</span><span class='line'>To use it:
</span><span class='line'>vagrant init <span class="s1">&#39;myubuntubox&#39;</span>
</span><span class='line'>vagrant up
</span><span class='line'>vagrant ssh
</span></code></pre></td></tr></table></div></figure>


<p>Cool, it did create a box file:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ll -h
</span><span class='line'>total 338M
</span><span class='line'>drwxr-xr-x 3 seletz staff  102 Jan 16 18:45 definitions
</span><span class='line'>drwxr-xr-x 3 seletz staff  102 Jan 16 18:48 iso
</span><span class='line'>-rw-r--r-- 1 seletz staff 338M Jan 16 20:20 myubuntubox.box
</span><span class='line'><span class="nv">$ </span>file myubuntubox.box
</span><span class='line'>myubuntubox.box: POSIX tar archive
</span><span class='line'><span class="nv">$ </span>tar tvf myubuntubox.box
</span><span class='line'>-rw-------  0 501    20  353481216 16 Jan 20:20 box-disk1.vmdk
</span><span class='line'>-rw-------  0 501    20        121 16 Jan 20:20 box.mf
</span><span class='line'>-rw-------  0 501    20      13271 16 Jan 20:19 box.ovf
</span><span class='line'>-rw-r--r--  0 501    20        505 16 Jan 20:20 Vagrantfile
</span></code></pre></td></tr></table></div></figure>


<p>See? the box file is actually a tarball of the exported VM, the root disk
and some meta data.</p>

<p>But we <em>still</em> can&#8217;t use that file.  We first need to <em>add</em> the box to our
vagrant setup.  We could upload that box file to a local HTTP server or
something like that.  The <code>vagrant add</code> command takes a URL or a path.</p>

<p>OK, let&#8217;s add the box, so that we can use it to create <a href="http://www.vagrantup.com" title="vagrant">vagrant</a> machines:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant box add <span class="s1">&#39;myubuntubox&#39;</span> <span class="s1">&#39;myubuntubox.box&#39;</span>
</span><span class='line'><span class="o">[</span>vagrant<span class="o">]</span> Downloading with Vagrant::Downloaders::File...
</span><span class='line'><span class="o">[</span>vagrant<span class="o">]</span> Copying box to temporary location...
</span><span class='line'><span class="o">[</span>vagrant<span class="o">]</span> Extracting box...
</span><span class='line'><span class="o">[</span>vagrant<span class="o">]</span> Verifying box...
</span><span class='line'><span class="o">[</span>vagrant<span class="o">]</span> Cleaning up downloaded box...
</span><span class='line'><span class="nv">$ </span>tree -h --du ~/.vagrant.d
</span><span class='line'>/Users/seletz/.vagrant.d
</span><span class='line'>├── <span class="o">[</span>979M<span class="o">]</span>  boxes
</span><span class='line'>│   ├── <span class="o">[</span>383M<span class="o">]</span>  base
</span><span class='line'>│   │   ├── <span class="o">[</span> 505<span class="o">]</span>  Vagrantfile
</span><span class='line'>│   │   ├── <span class="o">[</span>383M<span class="o">]</span>  box-disk1.vmdk
</span><span class='line'>│   │   ├── <span class="o">[</span> 121<span class="o">]</span>  box.mf
</span><span class='line'>│   │   └── <span class="o">[</span> 14K<span class="o">]</span>  box.ovf
</span><span class='line'>│   ├── <span class="o">[</span>259M<span class="o">]</span>  lucid32
</span><span class='line'>│   │   ├── <span class="o">[</span> 505<span class="o">]</span>  Vagrantfile
</span><span class='line'>│   │   ├── <span class="o">[</span>259M<span class="o">]</span>  box-disk1.vmdk
</span><span class='line'>│   │   ├── <span class="o">[</span> 121<span class="o">]</span>  box.mf
</span><span class='line'>│   │   └── <span class="o">[</span> 13K<span class="o">]</span>  box.ovf
</span><span class='line'>│   └── <span class="o">[</span>337M<span class="o">]</span>  myubuntubox
</span><span class='line'>│       ├── <span class="o">[</span> 505<span class="o">]</span>  Vagrantfile
</span><span class='line'>│       ├── <span class="o">[</span>337M<span class="o">]</span>  box-disk1.vmdk
</span><span class='line'>│       ├── <span class="o">[</span> 121<span class="o">]</span>  box.mf
</span><span class='line'>│       └── <span class="o">[</span> 13K<span class="o">]</span>  box.ovf
</span><span class='line'>├── <span class="o">[</span>  68<span class="o">]</span>  logs
</span><span class='line'>└── <span class="o">[</span> 102<span class="o">]</span>  tmp
</span><span class='line'>    └── <span class="o">[</span>   0<span class="o">]</span>  vagrant.lock
</span><span class='line'>
</span><span class='line'> 979M used in 6 directories, 13 files
</span></code></pre></td></tr></table></div></figure>


<p>OK, all that did was to untar the tarball to <code>~/.vagrant.d/boxes/myubuntubox</code>.</p>

<p>Let&#8217;s create a test vagrant setup in the <code>tst</code> directory:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir tst
</span><span class='line'><span class="nv">$ </span>vagrant init myubuntubox
</span><span class='line'>  create  Vagrantfile
</span><span class='line'><span class="nv">$ </span>vagrant up
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Importing base box <span class="s1">&#39;myubuntubox&#39;</span>...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Matching MAC address <span class="k">for </span>NAT networking...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Clearing any previously <span class="nb">set </span>forwarded ports...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Forwarding ports...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> -- ssh: <span class="nv">22</span> <span class="o">=</span>&gt; 2222 <span class="o">(</span>adapter 1<span class="o">)</span>
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Creating shared folders metadata...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Running any VM customizations...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Booting VM...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Waiting <span class="k">for </span>VM to boot. This can take a few minutes.
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> VM booted and ready <span class="k">for </span>use!
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Mounting shared folders...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> -- v-root: /vagrant
</span></code></pre></td></tr></table></div></figure>


<p>Wohooo!  Look&#8217;s like we&#8217;re in business!</p>

<p><a href="http://www.vagrantup.com" title="vagrant">vagrant</a> created a <em>new</em> VM based on the <em>myubuntubox</em>, fired it up,
configured a host-only network device, and configured port-forwarding such
that we have SSH access.  Other than the port <code>2222</code> being forwarded the
machine is completely isolated.  The VM is also started in <em>headless</em> mode.</p>

<p>All the above is specified in a configuration file <code>Vagrantfile</code>, which the
command <code>vagrant init</code> did create:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># -*- mode: ruby -*-</span>
</span><span class='line'><span class="c1"># vi: set ft=ruby ts=2 sw=2 expandtab:</span>
</span><span class='line'>
</span><span class='line'><span class="no">Vagrant</span><span class="o">::</span><span class="no">Config</span><span class="o">.</span><span class="n">run</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;myubuntubox&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>OK, I lied &#8211; the actuall file is quite a bit longer &#8211; but I just removed
<em>comments</em>.</p>

<p>Now let&#8217;ls login, shall we? :</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant ssh
</span><span class='line'>Welcome to Ubuntu 11.04 <span class="o">(</span>GNU/Linux 2.6.38-8-server x86_64<span class="o">)</span>
</span><span class='line'>
</span><span class='line'> * Documentation:  http://www.ubuntu.com/server/doc
</span><span class='line'>New release <span class="s1">&#39;oneiric&#39;</span> available.
</span><span class='line'>Run <span class="s1">&#39;do-release-upgrade&#39;</span> to upgrade to it.
</span><span class='line'>
</span><span class='line'>Last login: Mon Jan 16 19:01:18 2012 from 10.0.2.2
</span><span class='line'>vagrant@myubuntubox:~<span class="nv">$ </span>sudo id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>
</span><span class='line'>vagrant@myubuntubox:~<span class="nv">$ </span>mount
</span><span class='line'>/dev/mapper/myubuntubox-root on / <span class="nb">type </span>ext4 <span class="o">(</span>rw,errors<span class="o">=</span>remount-ro<span class="o">)</span>
</span><span class='line'>proc on /proc <span class="nb">type </span>proc <span class="o">(</span>rw,noexec,nosuid,nodev<span class="o">)</span>
</span><span class='line'>none on /sys <span class="nb">type </span>sysfs <span class="o">(</span>rw,noexec,nosuid,nodev<span class="o">)</span>
</span><span class='line'>fusectl on /sys/fs/fuse/connections <span class="nb">type </span>fusectl <span class="o">(</span>rw<span class="o">)</span>
</span><span class='line'>none on /sys/kernel/debug <span class="nb">type </span>debugfs <span class="o">(</span>rw<span class="o">)</span>
</span><span class='line'>none on /sys/kernel/security <span class="nb">type </span>securityfs <span class="o">(</span>rw<span class="o">)</span>
</span><span class='line'>none on /dev <span class="nb">type </span>devtmpfs <span class="o">(</span>rw,mode<span class="o">=</span>0755<span class="o">)</span>
</span><span class='line'>none on /dev/pts <span class="nb">type </span>devpts <span class="o">(</span>rw,noexec,nosuid,gid<span class="o">=</span>5,mode<span class="o">=</span>0620<span class="o">)</span>
</span><span class='line'>none on /dev/shm <span class="nb">type </span>tmpfs <span class="o">(</span>rw,nosuid,nodev<span class="o">)</span>
</span><span class='line'>none on /var/run <span class="nb">type </span>tmpfs <span class="o">(</span>rw,nosuid,mode<span class="o">=</span>0755<span class="o">)</span>
</span><span class='line'>none on /var/lock <span class="nb">type </span>tmpfs <span class="o">(</span>rw,noexec,nosuid,nodev<span class="o">)</span>
</span><span class='line'>/dev/sda1 on /boot <span class="nb">type </span>ext2 <span class="o">(</span>rw<span class="o">)</span>
</span><span class='line'>v-root on /vagrant <span class="nb">type </span>vboxsf <span class="o">(</span><span class="nv">uid</span><span class="o">=</span>1000,gid<span class="o">=</span>1000,rw<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wow.  Sweet.</p>

<p>A quite few things are of interest here:</p>

<ul>
<li><p>we&#8217;re able to ssh in w/o specifying a password.  <a href="http://www.vagrantup.com" title="vagrant">vagrant</a> uses
public key authentication, and per default uses an private key which
lies inside the <a href="http://www.vagrantup.com" title="vagrant">vagrant</a> gem.</p></li>
<li><p>we&#8217;re able to do a <code>sudo</code> w/o specifying a password.</p></li>
<li><p>There&#8217;s a <code>/vagrant</code> directory mounted.</p></li>
</ul>


<p>The <a href="http://www.vagrantup.com" title="vagrant">vagrant</a> mount point is actually a VirtualBox shared folder, and is
connected to our local <code>tst</code> folder, the one which contains the generated
<code>Vagrantfile</code>!  This will come in quite handy later when we&#8217;re start to
provision things.</p>

<p>Now lets look at resuming starting, stopping and so on:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant <span class="nb">suspend</span>
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Saving VM state and suspending execution...
</span><span class='line'><span class="nv">$ </span>vagrant resume
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Resuming suspended VM...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Booting VM...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Waiting <span class="k">for </span>VM to boot. This can take a few minutes.
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> VM booted and ready <span class="k">for </span>use!
</span><span class='line'><span class="nv">$ </span>vagrant halt
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Attempting graceful shutdown of linux...
</span><span class='line'><span class="nv">$ </span>vagrant up
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> VM already created. Booting <span class="k">if </span>it<span class="err">&#39;</span>s not already running...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Clearing any previously <span class="nb">set </span>forwarded ports...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Forwarding ports...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> -- ssh: <span class="nv">22</span> <span class="o">=</span>&gt; 2222 <span class="o">(</span>adapter 1<span class="o">)</span>
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Cleaning previously <span class="nb">set </span>shared folders...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Creating shared folders metadata...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Running any VM customizations...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Booting VM...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Waiting <span class="k">for </span>VM to boot. This can take a few minutes.
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> VM booted and ready <span class="k">for </span>use!
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Mounting shared folders...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> -- v-root: /vagrant
</span></code></pre></td></tr></table></div></figure>


<p>OK, let&#8217;s recap.</p>

<ul>
<li><p>Using <a href="http://github.com/jedi4ever/veewee" title="veewee">veewee</a> one can create a <a href="http://www.vagrantup.com" title="vagrant">vagrant</a> base box with very minimal
effort.  All the gory details are handled for us:</p>

<ul>
<li><p>downloading the ISO file</p></li>
<li><p>A headless install of the base box</p></li>
<li><p>Installation of all the <a href="http://www.vagrantup.com" title="vagrant">vagrant</a> dependencies into that VM</p></li>
<li><p>Installation of the VirtualBox Guest Additions in the correct, matching
version.</p></li>
<li><p>we can choose amongst a vast number of templates (64 templates as of
2012-01-16)</p>

<p><strong>There are even WINDOWS templates</strong></p></li>
<li><p>we can probably customize and tweak templates</p></li>
</ul>
</li>
<li><p>Using <a href="http://www.vagrantup.com" title="vagrant">vagrant</a> we can create <em>new</em> machines at will, with very minimal
configuration</p></li>
<li><p>We only ever need to check in the <code>Vagrantfile</code> to our source repository,
and all developers can just do a <code>vagrant up</code> and have their machines for
testing up and running</p></li>
</ul>


<p>Not bad for a first test.  Not bad at all.</p>

<h2>Mutli-VM setup</h2>

<p>OK, now let&#8217;s use the new base box and create a custom <code>Vagrantfile</code> which
specifies <em>two</em> VMs.  We&#8217;ll have to name them differently, we&#8217;ll use
<code>rabbitmq</code> and <code>worker</code> (that&#8217;s what I want to have in the end: a machine
for RabbitMQ and a machine for a custom worker which uses RabbitMQ).</p>

<p>We&#8217;ll create a new directory for this test:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir multivm
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>multivm
</span></code></pre></td></tr></table></div></figure>


<p>The <code>Vagrantfile</code> is simple:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># -*- mode: ruby -*-</span>
</span><span class='line'><span class="c1"># vi: set ft=ruby ts=2 sw=2 expandtab:</span>
</span><span class='line'>
</span><span class='line'><span class="no">Vagrant</span><span class="o">::</span><span class="no">Config</span><span class="o">.</span><span class="n">run</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">define</span> <span class="ss">:rabbitmq</span> <span class="k">do</span> <span class="o">|</span><span class="n">rabbitmq</span><span class="o">|</span>
</span><span class='line'>    <span class="n">rabbitmq</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;myubuntubox&quot;</span>
</span><span class='line'>    <span class="n">rabbitmq</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="s2">&quot;192.168.50.10&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">define</span> <span class="ss">:worker</span> <span class="k">do</span> <span class="o">|</span><span class="n">worker</span><span class="o">|</span>
</span><span class='line'>    <span class="n">worker</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;myubuntubox&quot;</span>
</span><span class='line'>    <span class="n">worker</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="s2">&quot;192.168.50.11&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We have configured two machines using the same &#8216;myubuntubox&#8217; base box.  We
also have configured a <strong>additional</strong> network device on both such that
they&#8217;re able to communicate with eachother.</p>

<p>Fire it up:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant up
</span><span class='line'><span class="o">[</span>rabbitmq<span class="o">]</span> Importing base box <span class="s1">&#39;myubuntubox&#39;</span>...
</span><span class='line'><span class="o">[</span>rabbitmq<span class="o">]</span> Preparing host only network...
</span><span class='line'><span class="o">[</span>rabbitmq<span class="o">]</span> Creating new host only network <span class="k">for </span>environment...
</span><span class='line'><span class="o">[</span>rabbitmq<span class="o">]</span> Matching MAC address <span class="k">for </span>NAT networking...
</span><span class='line'><span class="o">[</span>rabbitmq<span class="o">]</span> Clearing any previously <span class="nb">set </span>forwarded ports...
</span><span class='line'><span class="o">[</span>rabbitmq<span class="o">]</span> Forwarding ports...
</span><span class='line'><span class="o">[</span>rabbitmq<span class="o">]</span> -- ssh: <span class="nv">22</span> <span class="o">=</span>&gt; 2222 <span class="o">(</span>adapter 1<span class="o">)</span>
</span><span class='line'><span class="o">[</span>rabbitmq<span class="o">]</span> Creating shared folders metadata...
</span><span class='line'><span class="o">[</span>rabbitmq<span class="o">]</span> Running any VM customizations...
</span><span class='line'><span class="o">[</span>rabbitmq<span class="o">]</span> Booting VM...
</span><span class='line'><span class="o">[</span>rabbitmq<span class="o">]</span> Waiting <span class="k">for </span>VM to boot. This can take a few minutes.
</span><span class='line'><span class="o">[</span>rabbitmq<span class="o">]</span> VM booted and ready <span class="k">for </span>use!
</span><span class='line'><span class="o">[</span>rabbitmq<span class="o">]</span> Enabling host only network...
</span><span class='line'><span class="o">[</span>rabbitmq<span class="o">]</span> Mounting shared folders...
</span><span class='line'><span class="o">[</span>rabbitmq<span class="o">]</span> -- v-root: /vagrant
</span><span class='line'><span class="o">[</span>worker<span class="o">]</span> Fixed port collision <span class="s1">&#39;ssh&#39;</span>. Now on port 2200.
</span><span class='line'><span class="o">[</span>worker<span class="o">]</span> Importing base box <span class="s1">&#39;myubuntubox&#39;</span>...
</span><span class='line'><span class="o">[</span>worker<span class="o">]</span> Preparing host only network...
</span><span class='line'><span class="o">[</span>worker<span class="o">]</span> Matching MAC address <span class="k">for </span>NAT networking...
</span><span class='line'><span class="o">[</span>worker<span class="o">]</span> Clearing any previously <span class="nb">set </span>forwarded ports...
</span><span class='line'><span class="o">[</span>worker<span class="o">]</span> Forwarding ports...
</span><span class='line'><span class="o">[</span>worker<span class="o">]</span> -- ssh: <span class="nv">22</span> <span class="o">=</span>&gt; 2200 <span class="o">(</span>adapter 1<span class="o">)</span>
</span><span class='line'><span class="o">[</span>worker<span class="o">]</span> Creating shared folders metadata...
</span><span class='line'><span class="o">[</span>worker<span class="o">]</span> Running any VM customizations...
</span><span class='line'><span class="o">[</span>worker<span class="o">]</span> Booting VM...
</span><span class='line'><span class="o">[</span>worker<span class="o">]</span> Waiting <span class="k">for </span>VM to boot. This can take a few minutes.
</span><span class='line'><span class="o">[</span>worker<span class="o">]</span> VM booted and ready <span class="k">for </span>use!
</span><span class='line'><span class="o">[</span>worker<span class="o">]</span> Enabling host only network...
</span><span class='line'><span class="o">[</span>worker<span class="o">]</span> Mounting shared folders...
</span><span class='line'><span class="o">[</span>worker<span class="o">]</span> -- v-root: /vagrant
</span></code></pre></td></tr></table></div></figure>


<p>We can now ssh in to each machine:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant ssh rabbitmq
</span><span class='line'>...
</span><span class='line'><span class="nv">$ </span>vagrant ssh worker
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>OK, but what about installing some base packages after a <code>vagrant up</code>?
Well, that&#8217;s what <em>provisioning</em> is for.</p>

<h2>Provisioning</h2>

<p>OK, let&#8217;s use the <a href="http://www.vagrantup.com" title="vagrant">vagrant</a> shell provisiooning to install <code>RabbitMQ</code>.  For
this, all we need to do is to create a shell script and place it next to
the <code>Vagrantfile</code> and tell <a href="http://www.vagrantup.com" title="vagrant">vagrant</a> about it.  When doing a <code>vagrant up</code>,
the script will be executed and we&#8217;re set.</p>

<p>This is the script:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat rabbitmq.sh
</span><span class='line'>apt-get install -q -y rabbitmq-server
</span><span class='line'>apt-get install -q -y iotop htop
</span></code></pre></td></tr></table></div></figure>


<p>And this is the only change to the <code>Vagrantfile</code> from the previous step:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">diff --git a/Vagrantfile b/Vagrantfile</span>
</span><span class='line'><span class="gh">index b0c5528..77ec500 100644</span>
</span><span class='line'><span class="gd">--- a/Vagrantfile</span>
</span><span class='line'><span class="gi">+++ b/Vagrantfile</span>
</span><span class='line'><span class="gu">@@ -5,6 +5,7 @@ Vagrant::Config.run do |config|</span>
</span><span class='line'>   config.vm.define :rabbitmq do |rabbitmq|
</span><span class='line'>     rabbitmq.vm.box = &quot;myubuntubox&quot;
</span><span class='line'>     rabbitmq.vm.network &quot;192.168.50.10&quot;
</span><span class='line'><span class="gi">+    rabbitmq.vm.provision :shell, :path =&gt; &quot;rabbitmq.sh&quot;</span>
</span><span class='line'>   end
</span></code></pre></td></tr></table></div></figure>


<p>Now actually run the provisioning step.  Note that the VM is already
running:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant provision rabbitmq
</span><span class='line'><span class="o">[</span>rabbitmq<span class="o">]</span> Running provisioner: Vagrant::Provisioners::Shell...
</span><span class='line'><span class="o">[</span>rabbitmq<span class="o">]</span> stdin: is not a tty
</span><span class='line'><span class="o">[</span>rabbitmq<span class="o">]</span> Reading package lists...
</span><span class='line'><span class="o">[</span>rabbitmq<span class="o">]</span>
</span><span class='line'><span class="o">[</span>rabbitmq<span class="o">]</span> Building dependency tree...
</span><span class='line'><span class="o">[</span>rabbitmq<span class="o">]</span>
</span><span class='line'><span class="o">[</span>rabbitmq<span class="o">]</span> Reading state information...
</span><span class='line'><span class="o">[</span>rabbitmq<span class="o">]</span>
</span><span class='line'>...
</span><span class='line'><span class="o">[</span>rabbitmq<span class="o">]</span> Processing triggers <span class="k">for </span>man-db ...
</span><span class='line'><span class="o">[</span>rabbitmq<span class="o">]</span> Setting up htop <span class="o">(</span>0.9-2<span class="o">)</span> ...
</span><span class='line'><span class="o">[</span>rabbitmq<span class="o">]</span> Setting up iotop <span class="o">(</span>0.4-2<span class="o">)</span> ...
</span><span class='line'><span class="o">[</span>rabbitmq<span class="o">]</span> Processing triggers <span class="k">for </span>python-support ...
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s really all there is to it!</p>

<p>Recap:</p>

<ul>
<li><p>We were able to install a multi-machine, isolated VM setup for test and
development using 15 lines of configuration</p></li>
<li><p>The <em>provisioning</em> step is just telling <a href="http://www.vagrantup.com" title="vagrant">vagrant</a> the name of the shell
script to execute</p></li>
<li><p>The scripts used in provisioning were located next to the <code>Vagrantfile</code>
(i.e <em>not</em> inside the VM), and thus can be checked in.</p></li>
</ul>


<h2>Conclusion</h2>

<p>I think <a href="http://www.vagrantup.com" title="vagrant">vagrant</a> is great.  And <a href="http://github.com/jedi4ever/veewee" title="veewee">veewee</a> allows for hassle-free base boxes
to be set up, so no more downloading from untrusted sources!</p>

<p>I&#8217;ll definitely continue to integrate these systems in my task to get a
more complete test setup, including a headless CI setup with multiple
machines.  Together with something like <code>phantom.js</code> we can even create
screen shots in headless mode, such that we can peek at them errors &#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[groovy: scripting PDMlink]]></title>
    <link href="http://seletz.github.com/blog/2012/01/08/groovy-scripting-pdmlink/"/>
    <updated>2012-01-08T20:33:00+01:00</updated>
    <id>http://seletz.github.com/blog/2012/01/08/groovy-scripting-pdmlink</id>
    <content type="html"><![CDATA[<p>In this post I&#8217;ll explore how <code>groovy</code> may be used to script <code>Windchill PDMlink</code>.</p>

<!-- more -->


<h2>Setting up the classpath</h2>

<p>To have acces sto the <code>PDMlink</code> libraries, I&#8217;ll add a locally mounted <code>codebase</code>
directory to the <code>$CLASSPATH</code>:</p>

<pre><code>$ echo $WT_HOME
/Volumes/settr-vm-ptc/Windchill
$ wtclasspath
export CLASSPATH=:/Volumes/settr-vm-ptc/Windchill/codebas...
$ $(wtclasspath)
</code></pre>

<p>The <code>wtclasspath</code>script looks like this:</p>

<figure class='code'><figcaption><span>wtclasspath (wtclasspath)</span> <a href='http://seletz.github.com/downloads/code/shell/wtclasspath'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="k">function </span>setup_classpath<span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="k">for </span>jar in <span class="k">$(</span>find <span class="nv">$WT_HOME</span>/codebase/WEB-INF -name <span class="s2">&quot;*.jar&quot;</span><span class="k">)</span>; <span class="k">do</span>
</span><span class='line'><span class="k">      </span><span class="nv">cp</span><span class="o">=</span><span class="nv">$cp</span>:<span class="nv">$jar</span>
</span><span class='line'>  <span class="k">done</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>setup_classpath
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;export CLASSPATH=$cp:$WT_HOME/codebase&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Logging In</h2>

<p>To log in, we need to fetch the <code>RemoteMethodServer</code> and set username and password:</p>

<figure class='code'><figcaption><span>logging in (wt_login.groovy)</span> <a href='http://seletz.github.com/downloads/code/groovy/wt_login.groovy'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">wt.method.RemoteMethodServer</span>
</span><span class='line'>
</span><span class='line'><span class="n">ms</span> <span class="o">=</span> <span class="n">RemoteMethodServer</span><span class="o">.</span><span class="na">getDefault</span><span class="o">()</span>
</span><span class='line'><span class="n">ms</span><span class="o">.</span><span class="na">setUserName</span><span class="o">(</span><span class="s">&quot;orgadmin&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">ms</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&quot;orgadmin&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>After this, we&#8217;re able to use the <strong>windchill API</strong>.</p>

<h2>Fetching PDMlink Business Objects by Reference</h2>

<p>Fetching a business object using it&#8217;s <em>Object Reference String</em> translates
also quite well to groovy:</p>

<figure class='code'><figcaption><span>fetch a object (wt_docinfo.groovy)</span> <a href='http://seletz.github.com/downloads/code/groovy/wt_docinfo.groovy'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">wt.method.RemoteMethodServer</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.ptc.wvs.server.util.PublishUtils</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">def</span> <span class="nf">login</span><span class="o">(</span><span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ms</span> <span class="o">=</span> <span class="n">RemoteMethodServer</span><span class="o">.</span><span class="na">getDefault</span><span class="o">()</span>
</span><span class='line'>    <span class="n">ms</span><span class="o">.</span><span class="na">setUserName</span><span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">user</span><span class="o">)</span>
</span><span class='line'>    <span class="n">ms</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">password</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">ms</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">def</span> <span class="n">getObjectFromOR</span> <span class="o">=</span> <span class="o">{</span> <span class="n">oid</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">PublishUtils</span><span class="o">.</span><span class="na">getObjectFromRef</span><span class="o">(</span><span class="n">oid</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">def</span> <span class="n">getORFromObject</span> <span class="o">=</span> <span class="o">{</span> <span class="n">obj</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">PublishUtils</span><span class="o">.</span><span class="na">getRefFromObject</span><span class="o">(</span><span class="n">obj</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// log in</span>
</span><span class='line'><span class="n">login</span><span class="o">(</span><span class="nl">user:</span> <span class="s">&quot;orgadmin&quot;</span><span class="o">,</span> <span class="nl">password:</span> <span class="s">&quot;orgadmin&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// fetch a object by using a OR</span>
</span><span class='line'><span class="n">def</span> <span class="n">oid</span> <span class="o">=</span> <span class="s">&quot;VR:wt.epm.EPMDocument:8483330&quot;</span>
</span><span class='line'><span class="n">def</span> <span class="n">doc</span> <span class="o">=</span> <span class="n">getObjectFromOR</span><span class="o">(</span><span class="n">oid</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// We&#39;re able to access the properties of the EPMDocument</span>
</span><span class='line'><span class="n">println</span> <span class="s">&quot;${doc.displayIdentifier} [${doc.state} ${doc.type}] ${getORFromObject(doc)}&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// for the &quot;inspact last&quot; feature of groovyConsole </span>
</span><span class='line'><span class="k">return</span> <span class="n">doc</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running this script is easy:</p>

<pre><code>$ groovy -cp $CLASSPATH wt_docinfo.groovy
k06__core-coil_cc0000000.asm, -.17 [RELEASED CAD-Dokument] OR:wt.epm.EPMDocument:112511174
</code></pre>

<p>But this is all quite basic, and not using the <strong>groovy</strong> language features very much at all.</p>

<h2>Fetching all iterations of an object</h2>

<p>Now we&#8217;re going to use the <code>VersionControlHelper</code> service to fetch all iterations of an
object and print some information.  Please note how <strong>groovy</strong> makes it easy to traverse
collections using <code>each</code> and a <em>closure</em>.  Also note the <code>import ... as ...</code>:</p>

<figure class='code'><figcaption><span>printing iteration history (wt_iterations.groovy)</span> <a href='http://seletz.github.com/downloads/code/groovy/wt_iterations.groovy'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">wt.method.RemoteMethodServer</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.ptc.wvs.server.util.PublishUtils</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">wt.vc.VersionControlHelper</span> <span class="n">as</span> <span class="n">VCH</span>
</span><span class='line'>
</span><span class='line'><span class="n">def</span> <span class="nf">login</span><span class="o">(</span><span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ms</span> <span class="o">=</span> <span class="n">RemoteMethodServer</span><span class="o">.</span><span class="na">getDefault</span><span class="o">()</span>
</span><span class='line'>    <span class="n">ms</span><span class="o">.</span><span class="na">setUserName</span><span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">user</span><span class="o">)</span>
</span><span class='line'>    <span class="n">ms</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">password</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">ms</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">def</span> <span class="nf">getObjectFromOR</span><span class="o">(</span><span class="n">oid</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">PublishUtils</span><span class="o">.</span><span class="na">getObjectFromRef</span><span class="o">(</span><span class="n">oid</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">def</span> <span class="nf">getORFromObject</span><span class="o">(</span><span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">PublishUtils</span><span class="o">.</span><span class="na">getRefFromObject</span><span class="o">(</span><span class="n">obj</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">def</span> <span class="nf">info</span><span class="o">(</span><span class="n">doc</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="s">&quot;${doc.displayIdentifier} [${doc.state} ${doc.type}] ${getORFromObject(doc)}&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// log in</span>
</span><span class='line'><span class="n">login</span><span class="o">(</span><span class="nl">user:</span> <span class="s">&quot;orgadmin&quot;</span><span class="o">,</span> <span class="nl">password:</span> <span class="s">&quot;orgadmin&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// fetch a object by using a OR</span>
</span><span class='line'><span class="n">def</span> <span class="n">oid</span> <span class="o">=</span> <span class="s">&quot;VR:wt.epm.EPMDocument:8483330&quot;</span>
</span><span class='line'><span class="n">def</span> <span class="n">doc</span> <span class="o">=</span> <span class="n">getObjectFromOR</span><span class="o">(</span><span class="n">oid</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">VCH</span><span class="o">.</span><span class="na">service</span><span class="o">.</span><span class="na">allIterationsOf</span><span class="o">(</span><span class="n">doc</span><span class="o">.</span><span class="na">master</span><span class="o">).</span><span class="na">each</span> <span class="o">{</span> <span class="n">obj</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">println</span> <span class="nf">info</span><span class="o">(</span><span class="n">obj</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The output:</p>

<pre><code>$ groovy -cp $CLASSPATH wt_iterations.groovy
k06__core-coil_cc0000000.asm, -.17 [RELEASED CAD-Dokument] OR:wt.epm.EPMDocument:112511174
k06__core-coil_cc0000000.asm, -.16 [INWORK CAD-Dokument] OR:wt.epm.EPMDocument:105876837
k06__core-coil_cc0000000.asm, -.15 [INWORK CAD-Dokument] OR:wt.epm.EPMDocument:95189959
k06__core-coil_cc0000000.asm, -.14 [INWORK CAD-Dokument] OR:wt.epm.EPMDocument:86656605
k06__core-coil_cc0000000.asm, -.13 [INWORK CAD-Dokument] OR:wt.epm.EPMDocument:67720806
k06__core-coil_cc0000000.asm, -.12 [INWORK CAD-Dokument] OR:wt.epm.EPMDocument:57847775
k06__core-coil_cc0000000.asm, -.11 [INWORK CAD-Dokument] OR:wt.epm.EPMDocument:46825566
k06__core-coil_cc0000000.asm, -.10 [INWORK CAD-Dokument] OR:wt.epm.EPMDocument:44606524
k06__core-coil_cc0000000.asm, -.9 [INWORK CAD-Dokument] OR:wt.epm.EPMDocument:39832260
k06__core-coil_cc0000000.asm, -.8 [INWORK CAD-Dokument] OR:wt.epm.EPMDocument:31441018
k06__core-coil_cc0000000.asm, -.7 [INWORK CAD-Dokument] OR:wt.epm.EPMDocument:31417993
k06__core-coil_cc0000000.asm, -.6 [INWORK CAD-Dokument] OR:wt.epm.EPMDocument:30833875
k06__core-coil_cc0000000.asm, -.5 [INWORK CAD-Dokument] OR:wt.epm.EPMDocument:28909290
k06__core-coil_cc0000000.asm, -.4 [INWORK CAD-Dokument] OR:wt.epm.EPMDocument:11014342
</code></pre>

<p>Cool, eh?  The code <em>almost</em> looks like <strong>coffee script</strong> to me!</p>

<h2>Using the GroovyConsole and the Object Browser</h2>

<p>I&#8217;m no big fan of using heavy UIs when programming &#8211; I&#8217;m a avid user of <em>MacVIM</em> after all &#8211; but
being able to <em>explore</em> live-objects sounded at least interesting to me.</p>

<p>So, I fired up the <code>groovyConsole</code>:</p>

<pre><code>$ groovyConsole -cp $CLASSPATH wt_docinfo.groovy 
</code></pre>

<p><img class="center" src="http://dl.dropbox.com/u/154097/blog-images/groovy-object-browser.jpg" title="browsing a EPMDocument" alt="groovy object browser"></p>

<h2>Conclusion</h2>

<p>The experiments so far have been promising.  What I want to explore further is:</p>

<ul>
<li>runtime performance compared to <strong>jython</strong></li>
<li>importing <strong>groovy</strong> classes in java (should be a no-brainer)</li>
<li>creating a servlet using <strong>groovy</strong>, using <code>Groovy Server Pages</code></li>
<li>all of the above together in the <strong>Windchill</strong> context</li>
<li>doing a side-by-side comparsion of <strong>jython</strong> and <strong>groovy</strong> code</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[switch from bash to zsh]]></title>
    <link href="http://seletz.github.com/blog/2012/01/06/switch-from-bash-to-zsh/"/>
    <updated>2012-01-06T13:03:00+01:00</updated>
    <id>http://seletz.github.com/blog/2012/01/06/switch-from-bash-to-zsh</id>
    <content type="html"><![CDATA[<p>I finally came around to switch from <code>bash</code> to <code>zsh</code>.  While reading <a href="https://news.ycombinator.com" title="hackernews">hacker news</a>
I found a nice little setup on <em>github</em>: <a href="https://github.com/robbyrussell/oh-my-zsh" title="oh-my-zsh">oh-my-zsh</a></p>

<!-- more -->


<h2>Installation</h2>

<p>Installation was quite easy:</p>

<pre><code>$ brew install zsh
$ cd $HOME
$ git clone https://github.com/robbyrussell/oh-my-zsh.git .oh-my-zsh
$ sudo chsh -s /usr/local/bin/zsh yourusernamehere
</code></pre>

<p><strong>NOTE:</strong>
  You may need to edit <code>/etc/shells</code> to have <code>/usr/local/bin/zsh</code>.</p>

<h2>Configuration</h2>

<p>I did very little configuration.  All I really did is to choose a nice
theme from the many available themes.  Anyhow, my <code>.zshrc</code> looks like this:</p>

<figure class='code'><figcaption><span>.zshrc (zshrc)</span> <a href='http://seletz.github.com/downloads/code/shell/zshrc'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Path to your oh-my-zsh configuration.</span>
</span><span class='line'><span class="nv">ZSH</span><span class="o">=</span><span class="nv">$HOME</span>/.oh-my-zsh
</span><span class='line'>
</span><span class='line'><span class="c"># Set name of the theme to load.</span>
</span><span class='line'><span class="c"># Look in ~/.oh-my-zsh/themes/</span>
</span><span class='line'><span class="c"># Optionally, if you set this to &quot;random&quot;, it&#39;ll load a random theme each</span>
</span><span class='line'><span class="c"># time that oh-my-zsh is loaded.</span>
</span><span class='line'><span class="nv">ZSH_THEME</span><span class="o">=</span><span class="s2">&quot;nanotech&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Example aliases</span>
</span><span class='line'><span class="c"># alias zshconfig=&quot;mate ~/.zshrc&quot;</span>
</span><span class='line'><span class="c"># alias ohmyzsh=&quot;mate ~/.oh-my-zsh&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Set to this to use case-sensitive completion</span>
</span><span class='line'><span class="c"># CASE_SENSITIVE=&quot;true&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Comment this out to disable weekly auto-update checks</span>
</span><span class='line'><span class="c"># DISABLE_AUTO_UPDATE=&quot;true&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Uncomment following line if you want to disable colors in ls</span>
</span><span class='line'><span class="c"># DISABLE_LS_COLORS=&quot;true&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Uncomment following line if you want to disable autosetting terminal title.</span>
</span><span class='line'><span class="c"># DISABLE_AUTO_TITLE=&quot;true&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Uncomment following line if you want red dots to be displayed while waiting for completion</span>
</span><span class='line'><span class="c"># COMPLETION_WAITING_DOTS=&quot;true&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)</span>
</span><span class='line'><span class="c"># Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/</span>
</span><span class='line'><span class="c"># Example format: plugins=(rails git textmate ruby lighthouse)</span>
</span><span class='line'><span class="nv">plugins</span><span class="o">=(</span>osx git git-flow fabric groovy grails python<span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">source</span> <span class="nv">$ZSH</span>/oh-my-zsh.sh
</span><span class='line'>
</span><span class='line'><span class="c"># Customize to your needs...</span>
</span><span class='line'>
</span><span class='line'><span class="c">#---------------------------------------------------------------------</span>
</span><span class='line'><span class="c"># prompt and path</span>
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span>~/bin:/usr/local/bin:/usr/local/sbin:/usr/local/mysql/bin:<span class="nv">$PATH</span>
</span><span class='line'>
</span><span class='line'><span class="c">#---------------------------------------------------------------------</span>
</span><span class='line'><span class="c"># env setup</span>
</span><span class='line'><span class="nb">export </span><span class="nv">LANG</span><span class="o">=</span><span class="s2">&quot;de_DE.UTF-8&quot;</span>
</span><span class='line'><span class="c"># gnuchlog vim plugin</span>
</span><span class='line'><span class="nb">export </span><span class="nv">EMAIL</span><span class="o">=</span><span class="s2">&quot;Stefan Eletzhofer &lt;stefan.eletzhofer@nexiles.de&gt;&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">EDITOR</span><span class="o">=</span><span class="s2">&quot;/Applications/MacVim.app/Contents/MacOS/Vim -g -f &quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c">#---------------------------------------------------------------------</span>
</span><span class='line'><span class="c"># python</span>
</span><span class='line'><span class="nb">export </span><span class="nv">PYTHONSTARTUP</span><span class="o">=</span>~/.pyinit
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">VIRTUALENVWRAPPER_PYTHON</span><span class="o">=</span>/usr/bin/python2.6
</span><span class='line'><span class="nb">export </span><span class="nv">WORKON_HOME</span><span class="o">=</span>~/.virtualenvs
</span><span class='line'><span class="nb">export </span><span class="nv">PROJECT_HOME</span><span class="o">=</span><span class="nv">$HOME</span>/develop
</span><span class='line'><span class="nb">export </span><span class="nv">VIRTUALENV_ROOT</span><span class="o">=</span><span class="nv">$WORKON_HOME</span>
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">JYTHON_HOME</span><span class="o">=</span><span class="k">$(</span>brew --prefix jython<span class="k">)</span>/libexec
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:<span class="nv">$JYTHON_HOME</span>/bin
</span><span class='line'>
</span><span class='line'>. /usr/local/bin/virtualenvwrapper.sh
</span><span class='line'>
</span><span class='line'><span class="c">#---------------------------------------------------------------------</span>
</span><span class='line'><span class="c"># NODE.JS</span>
</span><span class='line'><span class="nb">export </span><span class="nv">NODE_PATH</span><span class="o">=</span>/usr/local/lib/node
</span><span class='line'><span class="nb">export </span><span class="nv">JS_CMD</span><span class="o">=</span>node
</span><span class='line'>
</span><span class='line'><span class="c">#---------------------------------------------------------------------</span>
</span><span class='line'><span class="c"># Ruby RVM</span>
</span><span class='line'><span class="nb">source</span> ~/.rvm/scripts/rvm
</span><span class='line'>
</span><span class='line'><span class="c">#---------------------------------------------------------------------</span>
</span><span class='line'><span class="c"># GROOVY</span>
</span><span class='line'><span class="nb">export </span><span class="nv">GROOVY_HOME</span><span class="o">=</span><span class="k">$(</span>brew --prefix groovy<span class="k">)</span>/libexec
</span><span class='line'>
</span><span class='line'><span class="c">#---------------------------------------------------------------------</span>
</span><span class='line'><span class="c"># alias</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">ls</span><span class="o">=</span><span class="s2">&quot;gls --color&quot;</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">la</span><span class="o">=</span><span class="s2">&quot;ls -la&quot;</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">ll</span><span class="o">=</span><span class="s2">&quot;ls -l&quot;</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">serve</span><span class="o">=</span><span class="s2">&quot;python -mSimpleHTTPServer&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c">#---------------------------------------------------------------------</span>
</span><span class='line'><span class="c"># direnv hook</span>
</span><span class='line'><span class="nb">eval</span> <span class="sb">`</span>direnv hook <span class="nv">$0</span><span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&#8217;s how my terminal looks like now.  I&#8217;m using the <a href="http://ethanschoonover.com/solarized" title="solarized">solarized</a> colour scheme,
and i&#8217;m using the <code>nanotech</code> theme:</p>

<p><img class="center" src="http://dl.dropbox.com/u/154097/blog-images/zsh-theme.jpg" title="my zsh theme" alt="zsh terminal screenshot"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[experiments with groovy]]></title>
    <link href="http://seletz.github.com/blog/2012/01/05/experiments-with-groovy/"/>
    <updated>2012-01-05T17:30:00+01:00</updated>
    <id>http://seletz.github.com/blog/2012/01/05/experiments-with-groovy</id>
    <content type="html"><![CDATA[<p>In my constant task to hone and resharpen my tools, I&#8217;ve started some experiments
with <strong>groovy</strong>.</p>

<!-- more -->


<p>Groovy is a scripting language which runs on top of the <em>JVM</em> like <em>Jython</em> or <em>jRuby</em>.  But
unlike other scripting languages, <strong>groovy</strong> classes are full-blown Java classes and can be used
within plain Java.  Also, any Java package can be used in groovy without writing bridges and
stuff.</p>

<p>Also it seems that <strong>groovy</strong> fits my python and coffee-script infested brain better than the more
modern and hip cousins <strong>clojure</strong> and <strong>scala</strong>.</p>

<p>So what does it look like?  Grok this:</p>

<figure class='code'><figcaption><span>maps, adding and iterating over items (mapkeys.groovy)</span> <a href='http://seletz.github.com/downloads/code/groovy/mapkeys.groovy'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">def</span> <span class="n">map</span> <span class="o">=</span> <span class="o">[:]</span>
</span><span class='line'>
</span><span class='line'><span class="n">map</span><span class="o">.</span><span class="na">some_key</span> <span class="o">=</span> <span class="s">&quot;value&quot;</span>
</span><span class='line'><span class="n">map</span><span class="o">.</span><span class="na">another_key</span> <span class="o">=</span> <span class="s">&quot;foo&quot;</span>
</span><span class='line'><span class="n">map</span><span class="o">[</span><span class="s">&quot;yet another key&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="s">&quot;bar&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">map</span><span class="o">.</span><span class="na">each</span> <span class="o">{</span> <span class="n">item</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">println</span> <span class="s">&quot;$item.key =&gt; $item.value&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// implicit maps</span>
</span><span class='line'><span class="n">def</span> <span class="n">errors</span> <span class="o">=</span> <span class="o">[</span> <span class="nl">EINVAL:</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="nl">ENOSPC:</span> <span class="o">-</span><span class="mi">3</span><span class="o">,</span> <span class="nl">EPROTO:</span> <span class="o">-</span><span class="mi">42</span><span class="o">]</span> <span class="c1">// just some example</span>
</span><span class='line'><span class="n">println</span> <span class="n">errors</span><span class="o">.</span><span class="na">EINVAL</span>  <span class="c1">// -1</span>
</span></code></pre></td></tr></table></div></figure>


<p>(note: I did&#8217;nt succeed in getting the groovy lexer running in pygments and octopress, so
no syntax coloring. oh well.)</p>

<p>This looks pretty readable to me!</p>

<h2>classes, closures, iterators &#8211; oh my</h2>

<p><strong>groovy</strong> is fully OO &#8211; grok this:</p>

<figure class='code'><figcaption><span>maps, adding and iterating over items (mapkeys.groovy)</span> <a href='http://seletz.github.com/downloads/code/groovy/mapkeys.groovy'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">def</span> <span class="n">map</span> <span class="o">=</span> <span class="o">[:]</span>
</span><span class='line'>
</span><span class='line'><span class="n">map</span><span class="o">.</span><span class="na">some_key</span> <span class="o">=</span> <span class="s">&quot;value&quot;</span>
</span><span class='line'><span class="n">map</span><span class="o">.</span><span class="na">another_key</span> <span class="o">=</span> <span class="s">&quot;foo&quot;</span>
</span><span class='line'><span class="n">map</span><span class="o">[</span><span class="s">&quot;yet another key&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="s">&quot;bar&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">map</span><span class="o">.</span><span class="na">each</span> <span class="o">{</span> <span class="n">item</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">println</span> <span class="s">&quot;$item.key =&gt; $item.value&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// implicit maps</span>
</span><span class='line'><span class="n">def</span> <span class="n">errors</span> <span class="o">=</span> <span class="o">[</span> <span class="nl">EINVAL:</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="nl">ENOSPC:</span> <span class="o">-</span><span class="mi">3</span><span class="o">,</span> <span class="nl">EPROTO:</span> <span class="o">-</span><span class="mi">42</span><span class="o">]</span> <span class="c1">// just some example</span>
</span><span class='line'><span class="n">println</span> <span class="n">errors</span><span class="o">.</span><span class="na">EINVAL</span>  <span class="c1">// -1</span>
</span></code></pre></td></tr></table></div></figure>


<p>The block enclosed in curly braces is a <em>closure</em>.  They&#8217;re objects, too:</p>

<figure class='code'><figcaption><span>fun with closures (closure.groovy)</span> <a href='http://seletz.github.com/downloads/code/groovy/closure.groovy'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// a closure</span>
</span><span class='line'><span class="n">def</span> <span class="n">closure</span> <span class="o">=</span> <span class="o">{</span> <span class="n">a</span><span class="o">,</span> <span class="n">b</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// let&#39;s call it</span>
</span><span class='line'><span class="n">println</span> <span class="n">closure</span><span class="o">.</span><span class="na">call</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">)</span>  <span class="c1">// 3</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// same, less verbose</span>
</span><span class='line'><span class="n">println</span> <span class="nf">closure</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">)</span>  <span class="c1">// 3</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// we can also accept a closure as a parameter</span>
</span><span class='line'><span class="n">def</span> <span class="nf">when</span><span class="o">(</span><span class="n">condition</span><span class="o">,</span> <span class="n">closure</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">condition</span><span class="o">)</span>
</span><span class='line'>      <span class="n">closure</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">when</span> <span class="o">(</span><span class="mi">4</span><span class="o">&lt;</span><span class="mi">5</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">println</span> <span class="s">&quot;yay!&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">def</span> <span class="n">local</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'><span class="n">def</span> <span class="n">test</span> <span class="o">=</span> <span class="o">{</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">local</span> <span class="o">+</span> <span class="n">x</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span> <span class="s">&quot;test(2) =&gt; ${test(2)}&quot;</span> <span class="c1">// test(2) =&gt; 4</span>
</span><span class='line'><span class="n">local</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="n">println</span> <span class="s">&quot;test(2) =&gt; ${test(2)}&quot;</span> <span class="c1">// test(2) =&gt; 5</span>
</span><span class='line'>
</span><span class='line'><span class="n">def</span> <span class="n">test2</span> <span class="o">=</span> <span class="o">{</span> <span class="n">x</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">def</span> <span class="n">local2</span> <span class="o">=</span> <span class="n">x</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">{</span> <span class="n">k</span> <span class="o">-&gt;</span> <span class="n">k</span> <span class="o">+</span> <span class="n">local2</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">def</span> <span class="n">test_2</span> <span class="o">=</span> <span class="n">test2</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'><span class="n">def</span> <span class="n">test_3</span> <span class="o">=</span> <span class="n">test2</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span> <span class="s">&quot;test_2(2) =&gt; ${test_2(2)}&quot;</span> <span class="c1">// test_2(2) =&gt; 4</span>
</span><span class='line'><span class="n">println</span> <span class="s">&quot;test_3(2) =&gt; ${test_3(2)}&quot;</span> <span class="c1">// test_3(2) =&gt; 5</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another nice thing is how classes are defined and how <strong>groovy</strong> creates automatic
constructors:</p>

<figure class='code'><figcaption><span>classes and constructors (class.groovy)</span> <a href='http://seletz.github.com/downloads/code/groovy/class.groovy'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// a simple class.   Note that we do not define a constructor.</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="n">name</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Integer</span> <span class="n">age</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">def</span> <span class="n">anonymous</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">()</span>
</span><span class='line'><span class="n">def</span> <span class="n">stefan</span>    <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">(</span> <span class="nl">name:</span> <span class="s">&quot;Stefan&quot;</span><span class="o">,</span> <span class="nl">age:</span> <span class="mi">38</span><span class="o">)</span>
</span><span class='line'><span class="n">def</span> <span class="n">fritz</span>     <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">(</span> <span class="nl">name:</span> <span class="s">&quot;Fritz&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span> <span class="s">&quot;${stefan.name} is ${stefan.age} years old.&quot;</span> <span class="c1">// stefan is 38 years old.</span>
</span><span class='line'><span class="n">println</span> <span class="s">&quot;${fritz.name} is ${fritz.age} years old.&quot;</span> <span class="c1">// fritz is null years old.</span>
</span><span class='line'>
</span><span class='line'><span class="n">stefan</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="mi">35</span> <span class="c1">// no setters and getters needed!</span>
</span><span class='line'><span class="n">println</span> <span class="s">&quot;${stefan.name} is ${stefan.age} years old.&quot;</span> <span class="c1">// stefan is 35 years old.</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// coerce a map to a class.  Will call named-arg automatic ctor</span>
</span><span class='line'><span class="n">def</span> <span class="n">maja</span> <span class="o">=</span> <span class="o">[</span><span class="nl">name:</span><span class="s">&quot;Maja&quot;</span><span class="o">,</span> <span class="nl">age:</span><span class="mi">8</span><span class="o">]</span> <span class="n">as</span> <span class="n">Person</span>
</span><span class='line'><span class="n">println</span> <span class="s">&quot;${maja.name} is ${maja.age} years old.&quot;</span> <span class="c1">// maja is 8 years old.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice how we did <strong>not</strong> need to specify getter and setter methods.  Also notice
how <strong>groovy</strong> uses named arguments!</p>

<h2>What&#8217;s next?</h2>

<p>Well.  Next up, I&#8217;ll try to get some <code>PDMlink</code> stuff working with <strong>groovy</strong>.</p>

<h2>Links</h2>

<p>You can find <strong>groovy</strong> documentation at <a href="http://groovy.codehaus.org/" title="Groovy at codehaus">codehaus</a>.  There&#8217;s also a zone
over at <a href="http://groovy.dzone.com/" title="Groovy Zone">dzone</a>.</p>

<p>There&#8217;s also a API documentation of the <a href="http://groovy.codehaus.org/api/overview-summary.html" title="Groovy JDK">groovy JDK</a>.</p>
]]></content>
  </entry>
  
</feed>
